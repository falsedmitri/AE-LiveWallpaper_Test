android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.b:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void dump(java.lang.String,java.io.PrintWriter,boolean) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    void bumpBackStackNesting(int) -> a
    int commit() -> a
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> b
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.c:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.d:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> P
    int mState -> a
    android.view.View mAnimatingAway -> b
    int mStateAfterAnimating -> c
    android.os.Bundle mSavedFragmentState -> d
    android.util.SparseArray mSavedViewState -> e
    int mIndex -> f
    java.lang.String mWho -> g
    android.os.Bundle mArguments -> h
    android.support.v4.app.Fragment mTarget -> i
    int mTargetIndex -> j
    int mTargetRequestCode -> k
    boolean mAdded -> l
    boolean mRemoving -> m
    boolean mResumed -> n
    boolean mFromLayout -> o
    boolean mInLayout -> p
    boolean mRestored -> q
    int mBackStackNesting -> r
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> s
    android.support.v4.app.FragmentActivity mActivity -> t
    android.support.v4.app.FragmentManagerImpl mChildFragmentManager -> u
    android.support.v4.app.Fragment mParentFragment -> v
    int mFragmentId -> w
    int mContainerId -> x
    java.lang.String mTag -> y
    boolean mHidden -> z
    boolean mDetached -> A
    boolean mRetainInstance -> B
    boolean mRetaining -> C
    boolean mHasMenu -> D
    boolean mMenuVisible -> E
    boolean mCalled -> F
    int mNextAnim -> G
    android.view.ViewGroup mContainer -> H
    android.view.View mView -> I
    android.view.View mInnerView -> J
    boolean mDeferStart -> K
    boolean mUserVisibleHint -> L
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> M
    boolean mLoadersStarted -> N
    boolean mCheckedForLoaderManager -> O
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState(android.os.Bundle) -> a
    void setIndex(int,android.support.v4.app.Fragment) -> a
    boolean isInBackStack() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    android.support.v4.app.FragmentActivity getActivity() -> b
    android.content.res.Resources getResources() -> c
    boolean isDetached() -> d
    void onHiddenChanged(boolean) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> c
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onViewStateRestored(android.os.Bundle) -> e
    void onStart() -> e
    void onResume() -> f
    void onSaveInstanceState(android.os.Bundle) -> f
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> g
    void onStop() -> h
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> i
    void onDestroy() -> j
    void initState() -> k
    void onDetach() -> l
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> m
    boolean onOptionsItemSelected(android.view.MenuItem) -> a
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void instantiateChildFragmentManager() -> n
    void performCreate(android.os.Bundle) -> g
    android.view.View performCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> b
    void performActivityCreated(android.os.Bundle) -> h
    void performStart() -> o
    void performResume() -> p
    void performConfigurationChanged(android.content.res.Configuration) -> a
    void performLowMemory() -> q
    boolean performCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> b
    boolean performPrepareOptionsMenu(android.view.Menu) -> c
    boolean performOptionsItemSelected(android.view.MenuItem) -> c
    boolean performContextItemSelected(android.view.MenuItem) -> d
    void performOptionsMenuClosed(android.view.Menu) -> d
    void performSaveInstanceState(android.os.Bundle) -> i
    void performPause() -> r
    void performStop() -> s
    void performReallyStop() -> t
    void performDestroyView() -> u
    void performDestroy() -> v
android.support.v4.app.Fragment$1 -> android.support.v4.app.e:
    android.support.v4.app.Fragment this$0 -> a
    android.view.View findViewById(int) -> a
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.f:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.g:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.h:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    android.support.v4.app.FragmentContainer mContainer -> c
    boolean mCreated -> d
    boolean mResumed -> e
    boolean mStopped -> f
    boolean mReallyStopped -> g
    boolean mRetaining -> h
    boolean mOptionsMenuInvalidated -> i
    boolean mCheckedForLoaderManager -> j
    boolean mLoadersStarted -> k
    java.util.HashMap mAllLoaderManagers -> l
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> m
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    java.lang.String viewToString(android.view.View) -> a
    void dumpViewHierarchy(java.lang.String,java.io.PrintWriter,android.view.View) -> a
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void invalidateSupportFragment(java.lang.String) -> a
    android.support.v4.app.LoaderManagerImpl getLoaderManager(java.lang.String,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.i:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.j:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    java.util.HashMap loaders -> e
android.support.v4.app.FragmentContainer -> android.support.v4.app.k:
    android.view.View findViewById(int) -> a
android.support.v4.app.FragmentManager -> android.support.v4.app.l:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.m:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.n:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    android.support.v4.app.FragmentContainer mContainer -> p
    android.support.v4.app.Fragment mParent -> q
    boolean mNeedMenuInvalidate -> r
    boolean mStateSaved -> s
    boolean mDestroyed -> t
    java.lang.String mNoTransactionsBecause -> u
    boolean mHavePendingDeferredStart -> v
    android.os.Bundle mStateBundle -> w
    android.util.SparseArray mStateArray -> x
    java.lang.Runnable mExecCommit -> y
    android.view.animation.Interpolator DECELERATE_QUINT -> z
    android.view.animation.Interpolator DECELERATE_CUBIC -> A
    android.view.animation.Interpolator ACCELERATE_QUINT -> B
    android.view.animation.Interpolator ACCELERATE_CUBIC -> C
    void throwException(java.lang.RuntimeException) -> a
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> a
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> b
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> d
    void makeActive(android.support.v4.app.Fragment) -> c
    void makeInactive(android.support.v4.app.Fragment) -> d
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> b
    boolean execPendingActions() -> e
    void reportBackStackChanged() -> f
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> g
    void saveFragmentViewState(android.support.v4.app.Fragment) -> e
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> f
    android.os.Parcelable saveAllState() -> h
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity,android.support.v4.app.FragmentContainer,android.support.v4.app.Fragment) -> a
    void noteStateNotSaved() -> i
    void dispatchCreate() -> j
    void dispatchActivityCreated() -> k
    void dispatchStart() -> l
    void dispatchResume() -> m
    void dispatchPause() -> n
    void dispatchStop() -> o
    void dispatchReallyStop() -> p
    void dispatchDestroyView() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> c
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.o:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.p:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity,android.support.v4.app.Fragment) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.r:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost -> android.support.v4.app.FragmentTabHost:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    android.support.v4.app.FragmentManager mFragmentManager -> c
    int mContainerId -> d
    android.widget.TabHost$OnTabChangeListener mOnTabChangeListener -> e
    android.support.v4.app.FragmentTabHost$TabInfo mLastTab -> f
    boolean mAttached -> g
    void setup() -> setup
    void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener) -> setOnTabChangedListener
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void onTabChanged(java.lang.String) -> onTabChanged
    android.support.v4.app.FragmentTransaction doTabChanged(java.lang.String,android.support.v4.app.FragmentTransaction) -> a
android.support.v4.app.FragmentTabHost$1 -> android.support.v4.app.s:
android.support.v4.app.FragmentTabHost$SavedState -> android.support.v4.app.FragmentTabHost$SavedState:
    java.lang.String curTab -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.app.FragmentTabHost$SavedState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentTabHost$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentTabHost$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentTabHost$TabInfo -> android.support.v4.app.u:
    java.lang.String tag -> a
    java.lang.Class clss -> b
    android.os.Bundle args -> c
    android.support.v4.app.Fragment fragment -> d
    android.support.v4.app.Fragment access$102(android.support.v4.app.FragmentTabHost$TabInfo,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment access$100(android.support.v4.app.FragmentTabHost$TabInfo) -> a
    java.lang.String access$200(android.support.v4.app.FragmentTabHost$TabInfo) -> b
    java.lang.Class access$300(android.support.v4.app.FragmentTabHost$TabInfo) -> c
    android.os.Bundle access$400(android.support.v4.app.FragmentTabHost$TabInfo) -> d
android.support.v4.app.FragmentTransaction -> android.support.v4.app.v:
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction detach(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction attach(android.support.v4.app.Fragment) -> b
    int commit() -> a
android.support.v4.app.LoaderManager -> android.support.v4.app.w:
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.x:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.y:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    java.lang.String mWho -> d
    android.support.v4.app.FragmentActivity mActivity -> e
    boolean mStarted -> f
    boolean mRetaining -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.z:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.aa:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ab:
android.support.v4.content.Loader -> android.support.v4.a.a:
    int mId -> a
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> b
    boolean mStarted -> c
    boolean mAbandoned -> d
    boolean mReset -> e
    boolean mContentChanged -> f
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void startLoading() -> a
    void onStartLoading() -> b
    void stopLoading() -> c
    void onStopLoading() -> d
    void reset() -> e
    void onReset() -> f
    java.lang.String dataToString(java.lang.Object) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.b:
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    void gc() -> c
    int size() -> a
    int keyAt(int) -> a
    java.lang.Object valueAt(int) -> b
    void clear() -> b
    int idealByteArraySize(int) -> c
    int idealIntArraySize(int) -> d
android.support.v4.view.KeyEventCompat -> android.support.v4.view.a:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.b:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.c:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.d:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.e:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.f:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.g:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.h:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.i:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.j:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.k:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> b
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> a
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.l:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.m:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.n:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.o:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.p:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.q:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.r:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.s:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.t:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.u:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.v:
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewCompat$JbMr1ViewCompatImpl -> android.support.v4.view.w:
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.x:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.y:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.z:
    long getFrameTime() -> a
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.aa:
    boolean canScrollHorizontally(android.view.View,int) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.ab:
    void postInvalidateOnAnimation(android.view.View) -> a
    void postOnAnimation(android.view.View,java.lang.Runnable) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    android.support.v4.view.ViewPager$PagerObserver mObserver -> m
    int mPageMargin -> n
    android.graphics.drawable.Drawable mMarginDrawable -> o
    int mTopPageBounds -> p
    int mBottomPageBounds -> q
    float mFirstOffset -> r
    float mLastOffset -> s
    int mChildWidthMeasureSpec -> t
    int mChildHeightMeasureSpec -> u
    boolean mInLayout -> v
    boolean mScrollingCacheEnabled -> w
    boolean mPopulatePending -> x
    int mOffscreenPageLimit -> y
    boolean mIsBeingDragged -> z
    boolean mIsUnableToDrag -> A
    int mDefaultGutterSize -> B
    int mGutterSize -> C
    int mTouchSlop -> D
    float mInitialMotionX -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    int mActivePointerId -> H
    android.view.VelocityTracker mVelocityTracker -> I
    int mMinimumVelocity -> J
    int mMaximumVelocity -> K
    int mFlingDistance -> L
    int mCloseEnough -> M
    int mSeenPositionMin -> N
    int mSeenPositionMax -> O
    boolean mFakeDragging -> P
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> Q
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> R
    boolean mFirstLayout -> S
    boolean mNeedCalculatePageOffsets -> T
    boolean mCalledSuper -> U
    int mDecorChildCount -> V
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> W
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> Z
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> aa
    android.support.v4.view.ViewPager$PageTransformer mPageTransformer -> ab
    java.lang.reflect.Method mSetChildrenDrawingOrderEnabled -> ac
    int mDrawingOrder -> ad
    java.util.ArrayList mDrawingOrderedChildren -> ae
    android.support.v4.view.ViewPager$ViewPositionComparator sPositionComparator -> af
    java.lang.Runnable mEndScrollRunnable -> ag
    int mScrollState -> ah
    void onDetachedFromWindow() -> onDetachedFromWindow
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> f
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void scrollToItem(int,boolean,int,boolean) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setChildrenDrawingOrderEnabledCompat(boolean) -> setChildrenDrawingOrderEnabledCompat
    int getChildDrawingOrder(int,int) -> getChildDrawingOrder
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> a
    void populate() -> b
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll(boolean) -> a
    boolean isGutterDrag(float,float) -> a
    void enableLayers(boolean) -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> g
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> h
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> c
    boolean pageRight() -> d
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    int[] access$400() -> e
android.support.v4.view.ViewPager$1 -> android.support.v4.view.ac:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.ad:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.ae:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.af:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ag:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
    int position -> e
    int childIndex -> f
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.ah:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ai:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PageTransformer -> android.support.v4.view.aj:
    void transformPage(android.view.View,float) -> a
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.ak:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.al:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.ViewPager$ViewPositionComparator -> android.support.v4.view.am:
    int compare(android.view.View,android.view.View) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.a:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.b:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.c:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.d:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.e:
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
com.qhosinyawi.matryoshnikslivewallpaper.LiveWallpaperService -> com.qhosinyawi.matryoshnikslivewallpaper.LiveWallpaperService:
    int MODE -> k
    int cameraWidth -> l
    int cameraHeight -> m
    int START_X -> a
    int START_Y -> b
    int startX -> c
    float SLOW_EXPIRATION_TIME -> d
    float FAST_EXPIRATION_TIME -> e
    float expirationTime -> f
    org.andengine.engine.camera.Camera mCamera -> n
    org.andengine.entity.scene.Scene mScene -> o
    org.andengine.opengl.texture.region.ITextureRegion mBirdBlueJayTextureRegion -> p
    org.andengine.opengl.texture.region.ITextureRegion mBirdEagleTextureRegion -> q
    org.andengine.opengl.texture.region.ITextureRegion mBirdOwlTextureRegion -> r
    org.andengine.opengl.texture.region.ITextureRegion mCatLeopardTextureRegion -> s
    org.andengine.opengl.texture.region.ITextureRegion mCatPumaTextureRegion -> t
    org.andengine.opengl.texture.region.ITextureRegion mCatTigerTextureRegion -> u
    org.andengine.opengl.texture.region.ITextureRegion mDogDog1TextureRegion -> v
    org.andengine.opengl.texture.region.ITextureRegion mDogDog2TextureRegion -> w
    org.andengine.opengl.texture.region.ITextureRegion mDogDog3TextureRegion -> x
    org.andengine.opengl.texture.region.ITextureRegion mFarmBullTextureRegion -> y
    org.andengine.opengl.texture.region.ITextureRegion mFarmCowTextureRegion -> z
    org.andengine.opengl.texture.region.ITextureRegion mFarmPigTextureRegion -> A
    org.andengine.opengl.texture.region.ITextureRegion mFemaleFemale1TextureRegion -> B
    org.andengine.opengl.texture.region.ITextureRegion mFemaleFemale2TextureRegion -> C
    org.andengine.opengl.texture.region.ITextureRegion mFemaleFemale3TextureRegion -> D
    org.andengine.opengl.texture.region.ITextureRegion mFurryRaccoonTextureRegion -> E
    org.andengine.opengl.texture.region.ITextureRegion mFurryKoalaTextureRegion -> F
    org.andengine.opengl.texture.region.ITextureRegion mFurryOlinguitoTextureRegion -> G
    org.andengine.opengl.texture.region.ITextureRegion mMaleMale1TextureRegion -> H
    org.andengine.opengl.texture.region.ITextureRegion mMaleMale2TextureRegion -> I
    org.andengine.opengl.texture.region.ITextureRegion mMaleMale3TextureRegion -> J
    org.andengine.opengl.texture.region.ITextureRegion mNinjaNinjaTextureRegion -> K
    org.andengine.opengl.texture.region.ITextureRegion mNinjaPenguinTextureRegion -> L
    org.andengine.opengl.texture.region.ITextureRegion mNinjaPenguinjaTextureRegion -> M
    boolean setOptionsTumble -> g
    boolean setOptionsFast -> h
    java.util.Random random -> N
    void onCreate() -> onCreate
    org.andengine.engine.options.EngineOptions onCreateEngineOptions() -> a
    void onCreateResources(org.andengine.ui.IGameInterface$OnCreateResourcesCallback) -> a
    void createResourceBirdBlueJay(java.lang.String) -> b
    void createResourceBirdEagle(java.lang.String) -> c
    void createResourceBirdOwl(java.lang.String) -> d
    void createResourceCatLeopard(java.lang.String) -> e
    void createResourceCatPuma(java.lang.String) -> f
    void createResourceCatTiger(java.lang.String) -> g
    void createResourceDogDog1(java.lang.String) -> h
    void createResourceDogDog2(java.lang.String) -> i
    void createResourceDogDog3(java.lang.String) -> j
    void createResourceFarmBull(java.lang.String) -> k
    void createResourceFarmCow(java.lang.String) -> l
    void createResourceFarmPig(java.lang.String) -> m
    void createResourceFemaleFemale1(java.lang.String) -> n
    void createResourceFemaleFemale2(java.lang.String) -> o
    void createResourceFemaleFemale3(java.lang.String) -> p
    void createResourceFurryRaccoon(java.lang.String) -> q
    void createResourceFurryKoala(java.lang.String) -> r
    void createResourceFurryOlinguito(java.lang.String) -> s
    void createResourceMaleMale1(java.lang.String) -> t
    void createResourceMaleMale2(java.lang.String) -> u
    void createResourceMaleMale3(java.lang.String) -> v
    void createResourceNinjaNinja(java.lang.String) -> w
    void createResourceNinjaPenguin(java.lang.String) -> x
    void createResourceNinjaPenguinja(java.lang.String) -> y
    void onCreateScene(org.andengine.ui.IGameInterface$OnCreateSceneCallback) -> a
    void onPopulateScene(org.andengine.entity.scene.Scene,org.andengine.ui.IGameInterface$OnPopulateSceneCallback) -> a
    void getStoredPreferences() -> p
    void onRecreateScene() -> b
    org.andengine.entity.particle.SpriteParticleSystem generateBirdBlueJayParticleEmitter() -> q
    org.andengine.entity.particle.SpriteParticleSystem generateBirdEagleParticleEmitter() -> r
    org.andengine.entity.particle.SpriteParticleSystem generateBirdOwlParticleEmitter() -> s
    org.andengine.entity.particle.SpriteParticleSystem generateCatTigerParticleEmitter() -> t
    org.andengine.entity.particle.SpriteParticleSystem generateCatLeopardParticleEmitter() -> u
    org.andengine.entity.particle.SpriteParticleSystem generateCatPumaParticleEmitter() -> v
    org.andengine.entity.particle.SpriteParticleSystem generateDogDog1ParticleEmitter() -> w
    org.andengine.entity.particle.SpriteParticleSystem generateDogDog2ParticleEmitter() -> x
    org.andengine.entity.particle.SpriteParticleSystem generateDogDog3ParticleEmitter() -> y
    org.andengine.entity.particle.SpriteParticleSystem generateFarmBullParticleEmitter() -> z
    org.andengine.entity.particle.SpriteParticleSystem generateFarmCowParticleEmitter() -> A
    org.andengine.entity.particle.SpriteParticleSystem generateFarmPigParticleEmitter() -> B
    org.andengine.entity.particle.SpriteParticleSystem generateFemaleFemale1ParticleEmitter() -> C
    org.andengine.entity.particle.SpriteParticleSystem generateFemaleFemale2ParticleEmitter() -> D
    org.andengine.entity.particle.SpriteParticleSystem generateFemaleFemale3ParticleEmitter() -> E
    org.andengine.entity.particle.SpriteParticleSystem generateFurryRaccoonParticleEmitter() -> F
    org.andengine.entity.particle.SpriteParticleSystem generateFurryKoalaParticleEmitter() -> G
    org.andengine.entity.particle.SpriteParticleSystem generateFurryOlinguitoParticleEmitter() -> H
    org.andengine.entity.particle.SpriteParticleSystem generateMaleMale1ParticleEmitter() -> I
    org.andengine.entity.particle.SpriteParticleSystem generateMaleMale2ParticleEmitter() -> J
    org.andengine.entity.particle.SpriteParticleSystem generateMaleMale3ParticleEmitter() -> K
    org.andengine.entity.particle.SpriteParticleSystem generateNinjaNinjaParticleEmitter() -> L
    org.andengine.entity.particle.SpriteParticleSystem generateNinjaPenguinParticleEmitter() -> M
    org.andengine.entity.particle.SpriteParticleSystem generateNinjaPenguinjaParticleEmitter() -> N
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void addPreferenceUpdateListener(com.qhosinyawi.matryoshnikslivewallpaper.PreferenceStoreListener) -> a
    void onPreferenceStoreUpdate(java.lang.String) -> a
    org.andengine.entity.particle.modifier.RotationParticleModifier getRotationParticleModifier() -> O
    int getRandomAcceleration() -> P
    org.andengine.entity.particle.modifier.AlphaParticleModifier getAlphaParticleModifier() -> Q
com.qhosinyawi.matryoshnikslivewallpaper.LiveWallpaperSettings -> com.qhosinyawi.matryoshnikslivewallpaper.LiveWallpaperSettings:
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void onPause() -> onPause
    void onBackPressed() -> onBackPressed
    void savePreferences() -> a
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    android.content.Intent getFacebookIntent() -> b
    android.content.Intent getGooglePlayStoreIntent() -> c
    boolean onPreferenceTreeClick(android.preference.PreferenceScreen,android.preference.Preference) -> onPreferenceTreeClick
com.qhosinyawi.matryoshnikslivewallpaper.PreferenceStore -> com.qhosinyawi.matryoshnikslivewallpaper.a:
    java.util.List listenerArray -> b
    java.lang.String preferenceString -> c
    boolean mBirdBlueJayCheck -> d
    boolean mBirdEagleCheck -> e
    boolean mBirdOwlCheck -> f
    boolean mCatLeopardCheck -> g
    boolean mCatPumaCheck -> h
    boolean mCatTigerCheck -> i
    boolean mDogDog1Check -> j
    boolean mDogDog2Check -> k
    boolean mDogDog3Check -> l
    boolean mFarmBullCheck -> m
    boolean mFarmCowCheck -> n
    boolean mFarmPigCheck -> o
    boolean mFemaleFemale1Check -> p
    boolean mFemaleFemale2Check -> q
    boolean mFemaleFemale3Check -> r
    boolean mFurryRaccoonCheck -> s
    boolean mFurryKoalaCheck -> t
    boolean mFurryOlinguintoCheck -> u
    boolean mMaleMale1Check -> v
    boolean mMaleMale2Check -> w
    boolean mMaleMale3Check -> x
    boolean mNinjaNinjaCheck -> y
    boolean mNinjaPenguinCheck -> z
    boolean mNinjaPenguinjaCheck -> A
    boolean mOptionsTumbleCheck -> B
    boolean mOptionsFastCheck -> C
    com.qhosinyawi.matryoshnikslivewallpaper.PreferenceStore instance -> a
    android.content.ContextWrapper contextWrapper -> D
    com.qhosinyawi.matryoshnikslivewallpaper.PreferenceStore getInstance() -> a
    void initialize(android.content.ContextWrapper) -> a
    boolean getValue(java.lang.String) -> a
    void toggleValue(java.lang.String) -> b
    void addListener(com.qhosinyawi.matryoshnikslivewallpaper.PreferenceStoreListener) -> a
    boolean removeListener(com.qhosinyawi.matryoshnikslivewallpaper.PreferenceStoreListener) -> b
    void notifyAfterSetValueDoNotNotify() -> b
    void notifyListeners() -> c
com.qhosinyawi.matryoshnikslivewallpaper.PreferenceStoreListener -> com.qhosinyawi.matryoshnikslivewallpaper.b:
    void onPreferenceStoreUpdate(java.lang.String) -> a
org.andengine.audio.BaseAudioEntity -> org.andengine.a.a:
    org.andengine.audio.IAudioManager mAudioManager -> a
    boolean mReleased -> b
    org.andengine.audio.IAudioManager getAudioManager() -> a
    void throwOnReleased() -> b
    void stop() -> c
    void release() -> d
    void assertNotReleased() -> e
org.andengine.audio.BaseAudioManager -> org.andengine.a.b:
    java.util.ArrayList mAudioEntities -> a
    float mMasterVolume -> b
    boolean remove(org.andengine.audio.IAudioEntity) -> a
    void releaseAll() -> a
org.andengine.audio.IAudioEntity -> org.andengine.a.c:
    void stop() -> c
    void release() -> d
org.andengine.audio.IAudioManager -> org.andengine.a.d:
org.andengine.audio.exception.AudioException -> org.andengine.a.a.a:
org.andengine.audio.music.MusicFactory -> org.andengine.a.b.a:
    java.lang.String sAssetBasePath -> a
    void setAssetBasePath(java.lang.String) -> a
    void onCreate() -> a
org.andengine.audio.music.MusicManager -> org.andengine.a.b.b:
org.andengine.audio.sound.Sound -> org.andengine.a.c.a:
    int mSoundID -> a
    int mStreamID -> b
    boolean mLoaded -> c
    int getSoundID() -> f
    void setLoaded(boolean) -> a
    android.media.SoundPool getSoundPool() -> h
    org.andengine.audio.sound.SoundManager getAudioManager() -> g
    void throwOnReleased() -> b
    void stop() -> c
    void release() -> d
    org.andengine.audio.IAudioManager getAudioManager() -> a
org.andengine.audio.sound.SoundFactory -> org.andengine.a.c.b:
    java.lang.String sAssetBasePath -> a
    void setAssetBasePath(java.lang.String) -> a
    void onCreate() -> a
org.andengine.audio.sound.SoundManager -> org.andengine.a.c.c:
    android.media.SoundPool mSoundPool -> c
    android.util.SparseArray mSoundMap -> d
    android.media.SoundPool getSoundPool() -> b
    boolean remove(org.andengine.audio.sound.Sound) -> a
    void releaseAll() -> a
    void onLoadComplete(android.media.SoundPool,int,int) -> onLoadComplete
    boolean remove(org.andengine.audio.IAudioEntity) -> a
org.andengine.audio.sound.exception.SoundException -> org.andengine.a.c.a.a:
org.andengine.audio.sound.exception.SoundReleasedException -> org.andengine.a.c.a.b:
org.andengine.engine.Engine -> org.andengine.b.a:
    org.andengine.input.sensor.SensorDelay SENSORDELAY_DEFAULT -> e
    boolean mRunning -> f
    boolean mDestroyed -> g
    long mLastTick -> h
    float mSecondsElapsedTotal -> i
    org.andengine.engine.Engine$EngineLock mEngineLock -> j
    org.andengine.engine.Engine$UpdateThread mUpdateThread -> k
    org.andengine.engine.handler.runnable.RunnableHandler mUpdateThreadRunnableHandler -> l
    org.andengine.engine.options.EngineOptions mEngineOptions -> m
    org.andengine.engine.camera.Camera mCamera -> a
    org.andengine.input.touch.controller.ITouchController mTouchController -> n
    org.andengine.opengl.vbo.VertexBufferObjectManager mVertexBufferObjectManager -> o
    org.andengine.opengl.texture.TextureManager mTextureManager -> p
    org.andengine.opengl.font.FontManager mFontManager -> q
    org.andengine.opengl.shader.ShaderProgramManager mShaderProgramManager -> r
    org.andengine.audio.sound.SoundManager mSoundManager -> s
    org.andengine.audio.music.MusicManager mMusicManager -> t
    org.andengine.entity.scene.Scene mScene -> b
    android.view.Display mDefaultDisplay -> u
    org.andengine.input.sensor.location.ILocationListener mLocationListener -> v
    android.location.Location mLocation -> w
    org.andengine.input.sensor.acceleration.IAccelerationListener mAccelerationListener -> x
    org.andengine.input.sensor.acceleration.AccelerationData mAccelerationData -> y
    org.andengine.input.sensor.orientation.IOrientationListener mOrientationListener -> z
    org.andengine.input.sensor.orientation.OrientationData mOrientationData -> A
    org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers -> B
    org.andengine.engine.handler.DrawHandlerList mDrawHandlers -> C
    int mSurfaceWidth -> c
    int mSurfaceHeight -> d
    void startUpdateThread() -> a
    void start() -> b
    void stop() -> c
    void setScene(org.andengine.entity.scene.Scene) -> a
    org.andengine.engine.options.EngineOptions getEngineOptions() -> d
    org.andengine.engine.camera.Camera getCamera() -> e
    void setSurfaceSize(int,int) -> a
    void onUpdateCameraSurface() -> f
    void setTouchController(org.andengine.input.touch.controller.ITouchController) -> a
    org.andengine.opengl.vbo.VertexBufferObjectManager getVertexBufferObjectManager() -> g
    org.andengine.opengl.texture.TextureManager getTextureManager() -> h
    org.andengine.audio.sound.SoundManager getSoundManager() -> i
    org.andengine.audio.music.MusicManager getMusicManager() -> j
    void onAccuracyChanged(android.hardware.Sensor,int) -> onAccuracyChanged
    void onSensorChanged(android.hardware.SensorEvent) -> onSensorChanged
    void onLocationChanged(android.location.Location) -> onLocationChanged
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    boolean onTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    boolean onTouchHUD(org.andengine.engine.camera.Camera,org.andengine.input.touch.TouchEvent) -> a
    boolean onTouchScene(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
    void onDestroy() -> k
    void onReloadResources() -> l
    org.andengine.engine.camera.Camera getCameraFromSurfaceTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    org.andengine.entity.scene.Scene getSceneFromSurfaceTouchEvent(org.andengine.input.touch.TouchEvent) -> c
    void convertSurfaceTouchEventToSceneTouchEvent(org.andengine.engine.camera.Camera,org.andengine.input.touch.TouchEvent) -> b
    void onTickUpdate() -> m
    void throwOnDestroyed() -> n
    void onUpdate(long) -> a
    void onUpdateScene(float) -> a
    void onUpdateUpdateHandlers(float) -> b
    void onUpdateDrawHandlers(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void onDrawFrame(org.andengine.opengl.util.GLState) -> a
    void onDrawScene(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    long getNanosecondsElapsed() -> o
    void releaseDefaultDisplay() -> p
    int getDisplayOrientation() -> q
org.andengine.engine.Engine$EngineDestroyedException -> org.andengine.b.b:
    org.andengine.engine.Engine this$0 -> a
org.andengine.engine.Engine$EngineLock -> org.andengine.b.c:
    java.util.concurrent.locks.Condition mDrawingCondition -> a
    java.util.concurrent.atomic.AtomicBoolean mDrawing -> b
    void notifyCanDraw() -> a
    void notifyCanUpdate() -> b
    void waitUntilCanDraw() -> c
    void waitUntilCanUpdate() -> d
org.andengine.engine.Engine$UpdateThread -> org.andengine.b.d:
    org.andengine.engine.Engine mEngine -> a
    org.andengine.engine.handler.runnable.RunnableHandler mRunnableHandler -> b
    void setEngine(org.andengine.engine.Engine) -> a
    void run() -> run
org.andengine.engine.camera.Camera -> org.andengine.b.a.a:
    float[] VERTICES_TMP -> a
    float mXMin -> b
    float mXMax -> c
    float mYMin -> d
    float mYMax -> e
    float mZNear -> n
    float mZFar -> o
    org.andengine.engine.camera.hud.HUD mHUD -> p
    org.andengine.entity.IEntity mChaseEntity -> q
    float mRotation -> f
    float mCameraSceneRotation -> g
    int mSurfaceX -> h
    int mSurfaceY -> i
    int mSurfaceWidth -> j
    int mSurfaceHeight -> k
    boolean mResizeOnSurfaceSizeChanged -> l
    org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers -> m
    float getXMin() -> a
    float getXMax() -> b
    float getYMin() -> c
    float getYMax() -> d
    void set(float,float,float,float) -> a
    float getCameraSceneWidth() -> e
    float getCameraSceneHeight() -> f
    float getCenterX() -> g
    float getCenterY() -> h
    void setCenter(float,float) -> a
    org.andengine.engine.camera.hud.HUD getHUD() -> i
    boolean hasHUD() -> j
    float getRotation() -> k
    void setSurfaceSize(int,int,int,int) -> a
    void onUpdate(float) -> a
    void reset() -> l
    void onDrawHUD(org.andengine.opengl.util.GLState) -> a
    void updateChaseEntity() -> m
    void onApplySceneMatrix(org.andengine.opengl.util.GLState) -> b
    void onApplySceneBackgroundMatrix(org.andengine.opengl.util.GLState) -> c
    void onApplyCameraSceneMatrix(org.andengine.opengl.util.GLState) -> d
    void applyRotation(org.andengine.opengl.util.GLState,float,float,float) -> a
    void convertSceneTouchEventToCameraSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    void convertCameraSceneTouchEventToSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    void applySceneToCameraSceneOffset(org.andengine.input.touch.TouchEvent) -> c
    void unapplySceneToCameraSceneOffset(org.andengine.input.touch.TouchEvent) -> d
    void applySceneRotation(org.andengine.input.touch.TouchEvent) -> e
    void unapplySceneRotation(org.andengine.input.touch.TouchEvent) -> f
    void applyCameraSceneRotation(org.andengine.input.touch.TouchEvent) -> g
    void unapplyCameraSceneRotation(org.andengine.input.touch.TouchEvent) -> h
    void convertSurfaceTouchEventToSceneTouchEvent(org.andengine.input.touch.TouchEvent,int,int) -> a
    void convertAxisAlignedSurfaceTouchEventToSceneTouchEvent(org.andengine.input.touch.TouchEvent,float,float) -> a
    void onSurfaceSizeInitialized(int,int,int,int) -> b
    void onSurfaceSizeChanged(int,int,int,int,int,int,int,int) -> a
org.andengine.engine.camera.hud.HUD -> org.andengine.b.a.a.a:
org.andengine.engine.handler.BaseEntityUpdateHandler -> org.andengine.b.b.a:
    org.andengine.entity.IEntity mEntity -> a
    void setEntity(org.andengine.entity.IEntity) -> a
    void onUpdate(float,org.andengine.entity.IEntity) -> a
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.engine.handler.DrawHandlerList -> org.andengine.b.b.b:
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
org.andengine.engine.handler.IDrawHandler -> org.andengine.b.b.c:
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
org.andengine.engine.handler.IUpdateHandler -> org.andengine.b.b.d:
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.engine.handler.UpdateHandlerList -> org.andengine.b.b.e:
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.engine.handler.physics.PhysicsHandler -> org.andengine.b.b.a.a:
    boolean mEnabled -> f
    float mAccelerationX -> a
    float mAccelerationY -> b
    float mVelocityX -> c
    float mVelocityY -> d
    float mAngularVelocity -> e
    void accelerate(float,float) -> a
    void onUpdate(float,org.andengine.entity.IEntity) -> a
    void reset() -> l
org.andengine.engine.handler.runnable.RunnableHandler -> org.andengine.b.b.b.a:
    java.util.ArrayList mRunnables -> a
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.engine.options.AudioOptions -> org.andengine.b.c.a:
    org.andengine.engine.options.SoundOptions mSoundOptions -> a
    org.andengine.engine.options.MusicOptions mMusicOptions -> b
    org.andengine.engine.options.SoundOptions getSoundOptions() -> a
    boolean needsSound() -> b
    boolean needsMusic() -> c
org.andengine.engine.options.ConfigChooserOptions -> org.andengine.b.c.b:
    boolean mRequestedMultiSampling -> a
    int mRequestedRedSize -> b
    int mRequestedGreenSize -> c
    int mRequestedBlueSize -> d
    int mRequestedAlphaSize -> e
    int mRequestedDepthSize -> f
    int mRequestedStencilSize -> g
    boolean isRequestedMultiSampling() -> a
    int getRequestedRedSize() -> b
    int getRequestedGreenSize() -> c
    int getRequestedBlueSize() -> d
    int getRequestedAlphaSize() -> e
    int getRequestedDepthSize() -> f
    int getRequestedStencilSize() -> g
org.andengine.engine.options.EngineOptions -> org.andengine.b.c.c:
    org.andengine.engine.Engine$EngineLock mEngineLock -> a
    boolean mFullscreen -> b
    org.andengine.engine.options.ScreenOrientation mScreenOrientation -> c
    org.andengine.engine.options.resolutionpolicy.IResolutionPolicy mResolutionPolicy -> d
    org.andengine.engine.camera.Camera mCamera -> e
    org.andengine.engine.options.TouchOptions mTouchOptions -> f
    org.andengine.engine.options.AudioOptions mAudioOptions -> g
    org.andengine.engine.options.RenderOptions mRenderOptions -> h
    org.andengine.engine.options.WakeLockOptions mWakeLockOptions -> i
    org.andengine.engine.Engine$UpdateThread mUpdateThread -> j
    int mUpdateThreadPriority -> k
    boolean hasEngineLock() -> a
    org.andengine.engine.Engine$EngineLock getEngineLock() -> b
    org.andengine.engine.options.TouchOptions getTouchOptions() -> c
    org.andengine.engine.options.AudioOptions getAudioOptions() -> d
    org.andengine.engine.options.RenderOptions getRenderOptions() -> e
    org.andengine.engine.camera.Camera getCamera() -> f
    boolean hasUpdateThread() -> g
    org.andengine.engine.Engine$UpdateThread getUpdateThread() -> h
    int getUpdateThreadPriority() -> i
org.andengine.engine.options.MusicOptions -> org.andengine.b.c.d:
    boolean mNeedsMusic -> a
    boolean needsMusic() -> a
org.andengine.engine.options.RenderOptions -> org.andengine.b.c.e:
    boolean mDithering -> a
    org.andengine.engine.options.ConfigChooserOptions mConfigChooserOptions -> b
    boolean isDithering() -> a
    org.andengine.engine.options.ConfigChooserOptions getConfigChooserOptions() -> b
org.andengine.engine.options.ScreenOrientation -> org.andengine.b.c.f:
    org.andengine.engine.options.ScreenOrientation LANDSCAPE_FIXED -> a
    org.andengine.engine.options.ScreenOrientation LANDSCAPE_SENSOR -> b
    org.andengine.engine.options.ScreenOrientation PORTRAIT_FIXED -> c
    org.andengine.engine.options.ScreenOrientation PORTRAIT_SENSOR -> d
    org.andengine.engine.options.ScreenOrientation[] ENUM$VALUES -> e
    org.andengine.engine.options.ScreenOrientation[] values() -> values
    org.andengine.engine.options.ScreenOrientation valueOf(java.lang.String) -> valueOf
org.andengine.engine.options.SoundOptions -> org.andengine.b.c.g:
    boolean mNeedsSound -> a
    int mMaxSimultaneousStreams -> b
    boolean needsSound() -> a
    int getMaxSimultaneousStreams() -> b
org.andengine.engine.options.TouchOptions -> org.andengine.b.c.h:
    boolean mNeedsMultiTouch -> a
    long mTouchEventIntervalMilliseconds -> b
    boolean needsMultiTouch() -> a
    long getTouchEventIntervalMilliseconds() -> b
org.andengine.engine.options.WakeLockOptions -> org.andengine.b.c.i:
    org.andengine.engine.options.WakeLockOptions BRIGHT -> a
    org.andengine.engine.options.WakeLockOptions SCREEN_BRIGHT -> b
    org.andengine.engine.options.WakeLockOptions SCREEN_DIM -> c
    org.andengine.engine.options.WakeLockOptions SCREEN_ON -> d
    int mFlag -> e
    org.andengine.engine.options.WakeLockOptions[] ENUM$VALUES -> f
    org.andengine.engine.options.WakeLockOptions[] values() -> values
    org.andengine.engine.options.WakeLockOptions valueOf(java.lang.String) -> valueOf
org.andengine.engine.options.resolutionpolicy.BaseResolutionPolicy -> org.andengine.b.c.a.a:
org.andengine.engine.options.resolutionpolicy.IResolutionPolicy -> org.andengine.b.c.a.b:
org.andengine.engine.options.resolutionpolicy.RatioResolutionPolicy -> org.andengine.b.c.a.c:
    float mRatio -> a
org.andengine.entity.Entity -> org.andengine.c.a:
    float[] VERTICES_SCENE_TO_LOCAL_TMP -> K
    float[] VERTICES_LOCAL_TO_SCENE_TMP -> L
    org.andengine.util.call.ParameterCallable PARAMETERCALLABLE_DETACHCHILD -> M
    boolean mDisposed -> a
    boolean mVisible -> b
    boolean mCullingEnabled -> c
    boolean mIgnoreUpdate -> d
    boolean mChildrenVisible -> e
    boolean mChildrenIgnoreUpdate -> f
    boolean mChildrenSortPending -> g
    int mTag -> h
    int mZIndex -> i
    org.andengine.entity.IEntity mParent -> N
    org.andengine.util.adt.list.SmartList mChildren -> j
    org.andengine.entity.modifier.EntityModifierList mEntityModifiers -> O
    org.andengine.engine.handler.UpdateHandlerList mUpdateHandlers -> P
    org.andengine.util.adt.color.Color mColor -> k
    float mX -> l
    float mY -> m
    float mOffsetCenterX -> n
    float mOffsetCenterY -> o
    float mLocalOffsetCenterX -> p
    float mLocalOffsetCenterY -> q
    float mWidth -> r
    float mHeight -> s
    float mRotation -> t
    float mRotationCenterX -> u
    float mRotationCenterY -> v
    float mLocalRotationCenterX -> w
    float mLocalRotationCenterY -> x
    float mScaleX -> y
    float mScaleY -> z
    float mScaleCenterX -> A
    float mScaleCenterY -> B
    float mLocalScaleCenterX -> C
    float mLocalScaleCenterY -> D
    float mSkewX -> E
    float mSkewY -> F
    float mSkewCenterX -> G
    float mSkewCenterY -> H
    float mLocalSkewCenterX -> I
    float mLocalSkewCenterY -> J
    boolean mLocalToParentTransformationDirty -> Q
    boolean mParentToLocalTransformationDirty -> R
    org.andengine.util.adt.transformation.Transformation mLocalToParentTransformation -> S
    org.andengine.util.adt.transformation.Transformation mParentToLocalTransformation -> T
    org.andengine.util.adt.transformation.Transformation mLocalToSceneTransformation -> U
    org.andengine.util.adt.transformation.Transformation mSceneToLocalTransformation -> V
    void onUpdateColor() -> a
    boolean isDisposed() -> b
    boolean isCulled(org.andengine.engine.camera.Camera) -> a
    boolean contains(float,float) -> a
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
    boolean hasParent() -> c
    org.andengine.entity.IEntity getParent() -> d
    void setParent(org.andengine.entity.IEntity) -> a
    int getZIndex() -> e
    float getX() -> f
    float getY() -> g
    void setPosition(float,float) -> b
    float getWidth() -> h
    float getHeight() -> i
    void setSize(float,float) -> c
    float getRotation() -> j
    void setRotation(float) -> b
    void setRotationCenter(float,float) -> d
    void setScaleX(float) -> c
    void setScaleY(float) -> d
    void setScale(float) -> e
    void setScale(float,float) -> e
    void setScaleCenter(float,float) -> f
    void setSkewCenter(float,float) -> g
    org.andengine.util.adt.color.Color getColor() -> k
    void setAlpha(float) -> f
    void detachChildren() -> m
    void attachChild(org.andengine.entity.IEntity) -> b
    void registerUpdateHandler(org.andengine.engine.handler.IUpdateHandler) -> a
    void registerEntityModifier(org.andengine.entity.modifier.IEntityModifier) -> a
    void resetEntityModifiers() -> n
    float[] getSceneCenterCoordinates() -> o
    org.andengine.util.adt.transformation.Transformation getLocalToParentTransformation() -> p
    org.andengine.util.adt.transformation.Transformation getParentToLocalTransformation() -> q
    org.andengine.util.adt.transformation.Transformation getLocalToSceneTransformation() -> r
    org.andengine.util.adt.transformation.Transformation getSceneToLocalTransformation() -> s
    float[] convertLocalCoordinatesToSceneCoordinates(float,float) -> h
    float[] convertLocalCoordinatesToSceneCoordinates(float,float,float[]) -> a
    float[] convertSceneCoordinatesToLocalCoordinates(float,float) -> i
    float[] convertSceneCoordinatesToLocalCoordinates(float,float,float[]) -> b
    void onAttached() -> t
    void onDetached() -> u
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void onUpdate(float) -> a
    void reset() -> l
    void dispose() -> v
    void finalize() -> finalize
    java.lang.String toString() -> toString
    void toString(java.lang.StringBuilder) -> a
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void draw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> c
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> d
    void allocateEntityModifiers() -> N
    void allocateChildren() -> O
    void allocateUpdateHandlers() -> P
    void onApplyTransformations(org.andengine.opengl.util.GLState) -> a
    void applyOffset(org.andengine.opengl.util.GLState) -> b
    void applyTranslation(org.andengine.opengl.util.GLState) -> c
    void applyRotation(org.andengine.opengl.util.GLState) -> d
    void applySkew(org.andengine.opengl.util.GLState) -> e
    void applyScale(org.andengine.opengl.util.GLState) -> f
    void onManagedDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> e
    void onManagedUpdate(float) -> g
    void updateLocalCenters() -> w
    void updateLocalCentersXs() -> x
    void updateLocalCentersYs() -> y
    void updateLocalOffsetCenterX() -> z
    void updateLocalOffsetCenterY() -> A
    void updateLocalRotationCenter() -> B
    void updateLocalRotationCenterX() -> C
    void updateLocalRotationCenterY() -> D
    void updateLocalScaleCenter() -> E
    void updateLocalScaleCenterX() -> F
    void updateLocalScaleCenterY() -> G
    void updateLocalSkewCenter() -> H
    void updateLocalSkewCenterX() -> I
    void updateLocalSkewCenterY() -> J
    void resetRotationCenter() -> K
    void resetScaleCenter() -> L
    void resetSkewCenter() -> M
    void assertEntityHasNoParent(org.andengine.entity.IEntity) -> c
org.andengine.entity.Entity$1 -> org.andengine.c.b:
    void call(org.andengine.entity.IEntity) -> a
    void call(java.lang.Object) -> a
org.andengine.entity.IEntity -> org.andengine.c.c:
    int getZIndex() -> e
    boolean hasParent() -> c
    org.andengine.entity.IEntity getParent() -> d
    void setParent(org.andengine.entity.IEntity) -> a
    float getX() -> f
    float getY() -> g
    void setPosition(float,float) -> b
    float getWidth() -> h
    float getHeight() -> i
    float getRotation() -> j
    void setRotation(float) -> b
    void setAlpha(float) -> f
    float[] getSceneCenterCoordinates() -> o
    org.andengine.util.adt.transformation.Transformation getLocalToSceneTransformation() -> r
    org.andengine.util.adt.transformation.Transformation getSceneToLocalTransformation() -> s
    void onAttached() -> t
    void onDetached() -> u
    void toString(java.lang.StringBuilder) -> a
org.andengine.entity.IEntityFactory -> org.andengine.c.d:
    org.andengine.entity.IEntity create(float,float) -> a
org.andengine.entity.ZIndexSorter -> org.andengine.c.e:
    org.andengine.entity.ZIndexSorter INSTANCE -> a
    java.util.Comparator mZIndexComparator -> b
    org.andengine.entity.ZIndexSorter getInstance() -> a
    void sort(java.util.List) -> a
org.andengine.entity.ZIndexSorter$1 -> org.andengine.c.f:
    org.andengine.entity.ZIndexSorter this$0 -> a
    int compare(org.andengine.entity.IEntity,org.andengine.entity.IEntity) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.andengine.entity.modifier.AlphaModifier -> org.andengine.c.a.a:
    void onSetInitialValue(org.andengine.entity.IEntity,float) -> a
    void onSetValue(org.andengine.entity.IEntity,float,float) -> a
    void onSetValue(java.lang.Object,float,float) -> a
    void onSetInitialValue(java.lang.Object,float) -> a
org.andengine.entity.modifier.EntityModifierList -> org.andengine.c.a.b:
org.andengine.entity.modifier.IEntityModifier -> org.andengine.c.a.c:
org.andengine.entity.modifier.IEntityModifier$IEntityModifierListener -> org.andengine.c.a.d:
org.andengine.entity.modifier.SingleValueSpanEntityModifier -> org.andengine.c.a.e:
org.andengine.entity.particle.Particle -> org.andengine.c.b.a:
    org.andengine.engine.handler.physics.PhysicsHandler mPhysicsHandler -> b
    float mLifeTime -> c
    float mExpireTime -> d
    boolean mExpired -> a
    org.andengine.entity.IEntity mEntity -> e
    org.andengine.entity.IEntity getEntity() -> a
    void setEntity(org.andengine.entity.IEntity) -> a
    float getLifeTime() -> b
    void setExpireTime(float) -> a
    void setExpired(boolean) -> a
    org.andengine.engine.handler.physics.PhysicsHandler getPhysicsHandler() -> c
    void onUpdate(float) -> b
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void reset() -> d
org.andengine.entity.particle.ParticleSystem -> org.andengine.c.b.b:
    float[] POSITION_OFFSET_CONTAINER -> R
    org.andengine.entity.IEntityFactory mEntityFactory -> K
    org.andengine.entity.particle.emitter.IParticleEmitter mParticleEmitter -> L
    org.andengine.entity.particle.Particle[] mParticles -> M
    java.util.ArrayList mParticleInitializers -> N
    java.util.ArrayList mParticleModifiers -> O
    float mRateMinimum -> S
    float mRateMaximum -> T
    boolean mParticlesSpawnEnabled -> U
    int mParticlesMaximum -> P
    int mParticlesAlive -> Q
    float mParticlesDueToSpawn -> V
    boolean isParticlesSpawnEnabled() -> N
    void reset() -> l
    void onManagedDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> e
    void onManagedUpdate(float) -> g
    void moveParticleToEnd(int) -> a
    void addParticleModifier(org.andengine.entity.particle.modifier.IParticleModifier) -> a
    void addParticleInitializer(org.andengine.entity.particle.initializer.IParticleInitializer) -> a
    void spawnParticles(float) -> h
    void spawnParticle() -> P
    float determineCurrentRate() -> O
org.andengine.entity.particle.SpriteParticleSystem -> org.andengine.c.b.c:
org.andengine.entity.particle.SpriteParticleSystem$1 -> org.andengine.c.b.d:
    org.andengine.opengl.texture.region.ITextureRegion val$pTextureRegion -> a
    org.andengine.opengl.vbo.VertexBufferObjectManager val$pVertexBufferObjectManager -> b
    org.andengine.entity.sprite.Sprite create(float,float) -> b
    org.andengine.entity.IEntity create(float,float) -> a
org.andengine.entity.particle.emitter.BaseParticleEmitter -> org.andengine.c.b.a.a:
    float mCenterX -> a
    float mCenterY -> b
    void onUpdate(float) -> a
    void reset() -> l
org.andengine.entity.particle.emitter.BaseRectangleParticleEmitter -> org.andengine.c.b.a.b:
    float mWidth -> c
    float mHeight -> d
    float mWidthHalf -> e
    float mHeightHalf -> f
    void setWidth(float) -> b
    void setHeight(float) -> c
org.andengine.entity.particle.emitter.IParticleEmitter -> org.andengine.c.b.a.c:
    void getPositionOffset(float[]) -> a
org.andengine.entity.particle.emitter.RectangleParticleEmitter -> org.andengine.c.b.a.d:
    void getPositionOffset(float[]) -> a
org.andengine.entity.particle.initializer.AccelerationParticleInitializer -> org.andengine.c.b.b.a:
    void onInitializeParticle(org.andengine.entity.particle.Particle,float,float) -> a
org.andengine.entity.particle.initializer.BaseDoubleValueParticleInitializer -> org.andengine.c.b.b.b:
    float mMinValueB -> a
    float mMaxValueB -> b
    void onInitializeParticle(org.andengine.entity.particle.Particle,float,float) -> a
    void onInitializeParticle(org.andengine.entity.particle.Particle,float) -> a
    float getRandomValueB() -> a
org.andengine.entity.particle.initializer.BaseSingleValueParticleInitializer -> org.andengine.c.b.b.c:
    float mMinValue -> c
    float mMaxValue -> d
    void onInitializeParticle(org.andengine.entity.particle.Particle,float) -> a
    void onInitializeParticle(org.andengine.entity.particle.Particle) -> a
    float getRandomValue() -> b
org.andengine.entity.particle.initializer.IParticleInitializer -> org.andengine.c.b.b.d:
    void onInitializeParticle(org.andengine.entity.particle.Particle) -> a
org.andengine.entity.particle.modifier.AlphaParticleModifier -> org.andengine.c.b.c.a:
    void onSetInitialValue(org.andengine.entity.particle.Particle,float) -> a
    void onSetValue(org.andengine.entity.particle.Particle,float,float) -> a
org.andengine.entity.particle.modifier.BaseSingleValueSpanParticleModifier -> org.andengine.c.b.c.b:
    float mFromTime -> a
    float mToTime -> b
    float mDuration -> c
    float mFromValue -> d
    float mValueSpan -> e
    org.andengine.util.modifier.ease.IEaseFunction mEaseFunction -> f
    void onSetInitialValue(org.andengine.entity.particle.Particle,float) -> a
    void onSetValue(org.andengine.entity.particle.Particle,float,float) -> a
    void onInitializeParticle(org.andengine.entity.particle.Particle) -> a
    void onUpdateParticle(org.andengine.entity.particle.Particle) -> b
org.andengine.entity.particle.modifier.ExpireParticleInitializer -> org.andengine.c.b.c.c:
    float mMinLifeTime -> a
    float mMaxLifeTime -> b
    void onInitializeParticle(org.andengine.entity.particle.Particle) -> a
org.andengine.entity.particle.modifier.IParticleModifier -> org.andengine.c.b.c.d:
    void onUpdateParticle(org.andengine.entity.particle.Particle) -> b
org.andengine.entity.particle.modifier.RotationParticleModifier -> org.andengine.c.b.c.e:
    void onSetInitialValue(org.andengine.entity.particle.Particle,float) -> a
    void onSetValue(org.andengine.entity.particle.Particle,float,float) -> a
org.andengine.entity.scene.CameraScene -> org.andengine.c.c.a:
    org.andengine.engine.camera.Camera mCamera -> K
    float getWidth() -> h
    float getHeight() -> i
    void setSize(float,float) -> c
    boolean onSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    boolean onChildSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    void onApplyMatrix(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> f
org.andengine.entity.scene.IOnAreaTouchListener -> org.andengine.c.c.b:
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,org.andengine.entity.scene.ITouchArea,float,float) -> a
org.andengine.entity.scene.IOnSceneTouchListener -> org.andengine.c.c.c:
    boolean onSceneTouchEvent(org.andengine.entity.scene.Scene,org.andengine.input.touch.TouchEvent) -> a
org.andengine.entity.scene.ITouchArea -> org.andengine.c.c.d:
    boolean contains(float,float) -> a
    float[] convertSceneCoordinatesToLocalCoordinates(float,float) -> i
    boolean onAreaTouched(org.andengine.input.touch.TouchEvent,float,float) -> a
org.andengine.entity.scene.Scene -> org.andengine.c.c.e:
    float mSecondsElapsedTotal -> K
    org.andengine.entity.scene.Scene mChildScene -> L
    boolean mChildSceneModalDraw -> N
    boolean mChildSceneModalUpdate -> O
    boolean mChildSceneModalTouch -> P
    org.andengine.util.adt.list.SmartList mTouchAreas -> M
    org.andengine.engine.handler.runnable.RunnableHandler mRunnableHandler -> Q
    org.andengine.entity.scene.IOnSceneTouchListener mOnSceneTouchListener -> R
    org.andengine.entity.scene.IOnAreaTouchListener mOnAreaTouchListener -> S
    org.andengine.entity.scene.background.IBackground mBackground -> T
    boolean mBackgroundEnabled -> U
    boolean mOnAreaTouchTraversalBackToFront -> V
    boolean mTouchAreaBindingOnActionDownEnabled -> W
    boolean mTouchAreaBindingOnActionMoveEnabled -> X
    android.util.SparseArray mTouchAreaBindings -> Y
    boolean mOnSceneTouchListenerBindingOnActionDownEnabled -> Z
    android.util.SparseArray mOnSceneTouchListenerBindings -> aa
    void setBackground(org.andengine.entity.scene.background.IBackground) -> a
    void clearChildScene() -> N
    void onManagedDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> e
    void onApplyMatrix(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> f
    void onManagedUpdate(float) -> g
    boolean onSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> a
    java.lang.Boolean onAreaTouchEvent(org.andengine.input.touch.TouchEvent,float,float,org.andengine.entity.scene.ITouchArea) -> a
    boolean onChildSceneTouchEvent(org.andengine.input.touch.TouchEvent) -> b
    void reset() -> l
    void setParent(org.andengine.entity.IEntity) -> a
org.andengine.entity.scene.background.Background -> org.andengine.c.c.a.a:
    org.andengine.util.modifier.ModifierList mBackgroundModifiers -> a
    org.andengine.util.adt.color.Color mColor -> b
    boolean mColorEnabled -> c
    void onUpdate(float) -> a
    void onDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> a
    void reset() -> l
org.andengine.entity.scene.background.IBackground -> org.andengine.c.c.a.b:
org.andengine.entity.shape.IShape -> org.andengine.c.d.a:
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> a_
org.andengine.entity.shape.Shape -> org.andengine.c.d.b:
    int mBlendFunctionSource -> K
    int mBlendFunctionDestination -> L
    boolean mBlendingEnabled -> M
    org.andengine.opengl.shader.ShaderProgram mShaderProgram -> N
    void setBlendingEnabled(boolean) -> a
    void setBlendFunction(int,int) -> a
    void onUpdateVertices() -> N
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> d
    void setSize(float,float) -> c
    void reset() -> l
    void dispose() -> v
    void initBlendFunction(org.andengine.opengl.texture.region.ITextureRegion) -> a
    void initBlendFunction(org.andengine.opengl.texture.ITexture) -> a
    void initBlendFunction(org.andengine.opengl.texture.TextureOptions) -> a
org.andengine.entity.sprite.Sprite -> org.andengine.c.e.a:
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes VERTEXBUFFEROBJECTATTRIBUTES_DEFAULT -> O
    org.andengine.opengl.texture.region.ITextureRegion mTextureRegion -> P
    org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject mSpriteVertexBufferObject -> Q
    boolean mFlippedVertical -> R
    boolean mFlippedHorizontal -> S
    org.andengine.opengl.texture.region.ITextureRegion getTextureRegion() -> O
    boolean isFlippedHorizontal() -> P
    boolean isFlippedVertical() -> Q
    org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject getVertexBufferObject() -> R
    void reset() -> l
    void preDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> b
    void draw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> c
    void postDraw(org.andengine.opengl.util.GLState,org.andengine.engine.camera.Camera) -> d
    void onUpdateVertices() -> N
    void onUpdateColor() -> a
    void onUpdateTextureCoordinates() -> S
    org.andengine.opengl.vbo.IVertexBufferObject getVertexBufferObject() -> a_
org.andengine.entity.sprite.vbo.HighPerformanceSpriteVertexBufferObject -> org.andengine.c.e.a.a:
    void onUpdateColor(org.andengine.entity.sprite.Sprite) -> a
    void onUpdateVertices(org.andengine.entity.sprite.Sprite) -> b
    void onUpdateTextureCoordinates(org.andengine.entity.sprite.Sprite) -> c
org.andengine.entity.sprite.vbo.ISpriteVertexBufferObject -> org.andengine.c.e.a.b:
    void onUpdateColor(org.andengine.entity.sprite.Sprite) -> a
    void onUpdateVertices(org.andengine.entity.sprite.Sprite) -> b
    void onUpdateTextureCoordinates(org.andengine.entity.sprite.Sprite) -> c
org.andengine.extension.opengl.EGLHelper -> org.andengine.d.a.a:
    int[] EGL_ATTRIBUTES -> b
    javax.microedition.khronos.egl.EGL10 mEGL -> c
    javax.microedition.khronos.egl.EGLDisplay mEGLDisplay -> d
    javax.microedition.khronos.egl.EGLSurface mEGLSurface -> e
    javax.microedition.khronos.egl.EGLContext mEGLContext -> f
    javax.microedition.khronos.egl.EGLConfig mEGLConfig -> a
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> g
    void start() -> a
    javax.microedition.khronos.opengles.GL createSurface(android.view.SurfaceHolder) -> a
    boolean swapBuffers() -> b
    void destroySurface() -> c
    void finish() -> d
org.andengine.extension.opengl.GLThread -> org.andengine.d.a.b:
    org.andengine.extension.opengl.GLThread$GLThreadManager sGLThreadManager -> c
    org.andengine.extension.opengl.GLThread mEGLOwnerThread -> d
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> e
    android.view.SurfaceHolder mSurfaceHolder -> a
    boolean mSizeChanged -> f
    boolean mDone -> b
    boolean mPaused -> g
    boolean mHasSurface -> h
    boolean mWaitingForSurface -> i
    boolean mHaveEGL -> j
    int mWidth -> k
    int mHeight -> l
    int mRenderMode -> m
    boolean mRequestRender -> n
    boolean mEventsWaiting -> o
    android.opengl.GLSurfaceView$Renderer mRenderer -> p
    java.util.ArrayList mEventQueue -> q
    org.andengine.extension.opengl.EGLHelper mEGLHelper -> r
    boolean isDone() -> d
    void setRenderMode(int) -> a
    void run() -> run
    void stopEGLLocked() -> e
    void guardedRun() -> f
    void surfaceCreated(android.view.SurfaceHolder) -> a
    void surfaceDestroyed() -> a
    void onPause() -> b
    void onResume() -> c
    void onWindowResize(int,int) -> a
    java.lang.Runnable getEvent() -> g
    org.andengine.extension.opengl.GLThread access$0(org.andengine.extension.opengl.GLThread) -> a
    void access$1(org.andengine.extension.opengl.GLThread,org.andengine.extension.opengl.GLThread) -> a
org.andengine.extension.opengl.GLThread$GLThreadManager -> org.andengine.d.a.c:
    org.andengine.extension.opengl.GLThread this$0 -> a
    void threadExiting(org.andengine.extension.opengl.GLThread) -> a
    boolean tryAcquireEglSurface(org.andengine.extension.opengl.GLThread) -> b
    void releaseEglSurface(org.andengine.extension.opengl.GLThread) -> c
org.andengine.extension.opengl.GLWallpaperService -> org.andengine.d.a.d:
    android.service.wallpaper.WallpaperService$Engine onCreateEngine() -> onCreateEngine
org.andengine.extension.opengl.GLWallpaperService$GLEngine -> org.andengine.d.a.e:
    org.andengine.extension.opengl.GLThread mGLThread -> b
    android.opengl.GLSurfaceView$EGLConfigChooser mEGLConfigChooser -> c
    org.andengine.extension.opengl.GLWallpaperService this$0 -> a
    void setRenderer(android.opengl.GLSurfaceView$Renderer) -> a
    void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser) -> a
    void setRenderMode(int) -> a
    void onVisibilityChanged(boolean) -> onVisibilityChanged
    void onSurfaceChanged(android.view.SurfaceHolder,int,int,int) -> onSurfaceChanged
    void onSurfaceCreated(android.view.SurfaceHolder) -> onSurfaceCreated
    void onSurfaceDestroyed(android.view.SurfaceHolder) -> onSurfaceDestroyed
    void onPause() -> a
    void onResume() -> b
    void checkRenderThreadState() -> c
org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService -> org.andengine.d.b.a.a:
    org.andengine.engine.options.EngineOptions mEngineOptions -> i
    org.andengine.engine.Engine mEngine -> j
    boolean mGamePaused -> a
    boolean mGameCreated -> b
    boolean mCreateGameCalled -> c
    boolean mOnReloadResourcesScheduled -> d
    void onCreate() -> onCreate
    org.andengine.engine.Engine onCreateEngine(org.andengine.engine.options.EngineOptions) -> a
    void onSurfaceCreated(org.andengine.opengl.util.GLState) -> a
    void onSurfaceChanged(org.andengine.opengl.util.GLState,int,int) -> a
    void onCreateGame() -> c
    void onGameCreated() -> d
    void onResume() -> e
    void onResumeGame() -> f
    void onReloadResources() -> g
    void onPause() -> h
    void onPauseGame() -> i
    void onDestroy() -> onDestroy
    void onDestroyResources() -> j
    void onGameDestroyed() -> k
    org.andengine.engine.Engine getEngine() -> l
    org.andengine.opengl.vbo.VertexBufferObjectManager getVertexBufferObjectManager() -> m
    org.andengine.opengl.texture.TextureManager getTextureManager() -> n
    android.service.wallpaper.WallpaperService$Engine onCreateEngine() -> onCreateEngine
    void onTap(int,int) -> a
    void onDrop(int,int) -> b
    void onOffsetsChanged(float,float,float,float,int,int) -> a
    void applyEngineOptions() -> o
org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService$1 -> org.andengine.d.b.a.b:
    org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService this$0 -> a
    void onPopulateSceneFinished() -> a
org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService$2 -> org.andengine.d.b.a.c:
    org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService this$0 -> a
    org.andengine.ui.IGameInterface$OnPopulateSceneCallback val$onPopulateSceneCallback -> b
    void onCreateSceneFinished(org.andengine.entity.scene.Scene) -> a
org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService$3 -> org.andengine.d.b.a.d:
    org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService this$0 -> a
    org.andengine.ui.IGameInterface$OnCreateSceneCallback val$onCreateSceneCallback -> b
    void onCreateResourcesFinished() -> a
org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService$BaseWallpaperGLEngine -> org.andengine.d.b.a.e:
    org.andengine.opengl.view.EngineRenderer mEngineRenderer -> c
    org.andengine.opengl.view.ConfigChooser mConfigChooser -> d
    org.andengine.extension.ui.livewallpaper.BaseLiveWallpaperService this$0 -> b
    android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean) -> onCommand
    void onOffsetsChanged(float,float,float,float,int,int) -> onOffsetsChanged
    void onResume() -> b
    void onPause() -> a
    void onDestroy() -> onDestroy
org.andengine.input.sensor.BaseSensorData -> org.andengine.input.sensor.a:
    float[] mValues -> a
    int mAccuracy -> b
    int mDisplayRotation -> c
    void setValues(float[]) -> a
    void setAccuracy(int) -> a
    void setDisplayRotation(int) -> b
    java.lang.String toString() -> toString
org.andengine.input.sensor.SensorDelay -> org.andengine.input.sensor.b:
    org.andengine.input.sensor.SensorDelay NORMAL -> a
    org.andengine.input.sensor.SensorDelay UI -> b
    org.andengine.input.sensor.SensorDelay GAME -> c
    org.andengine.input.sensor.SensorDelay FASTEST -> d
    int mDelay -> e
    org.andengine.input.sensor.SensorDelay[] ENUM$VALUES -> f
    org.andengine.input.sensor.SensorDelay[] values() -> values
    org.andengine.input.sensor.SensorDelay valueOf(java.lang.String) -> valueOf
org.andengine.input.sensor.acceleration.AccelerationData -> org.andengine.input.sensor.a.a:
    org.andengine.input.sensor.acceleration.AccelerationData$IAxisSwap[] AXISSWAPS -> d
    void setValues(float[]) -> a
    java.lang.String toString() -> toString
org.andengine.input.sensor.acceleration.AccelerationData$1 -> org.andengine.input.sensor.a.b:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$2 -> org.andengine.input.sensor.a.c:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$3 -> org.andengine.input.sensor.a.d:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$4 -> org.andengine.input.sensor.a.e:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.AccelerationData$IAxisSwap -> org.andengine.input.sensor.a.f:
    void swapAxis(float[]) -> a
org.andengine.input.sensor.acceleration.IAccelerationListener -> org.andengine.input.sensor.a.g:
    void onAccelerationAccuracyChanged(org.andengine.input.sensor.acceleration.AccelerationData) -> a
    void onAccelerationChanged(org.andengine.input.sensor.acceleration.AccelerationData) -> b
org.andengine.input.sensor.location.ILocationListener -> org.andengine.input.sensor.location.a:
    void onLocationProviderEnabled() -> a
    void onLocationChanged(android.location.Location) -> a
    void onLocationLost() -> b
    void onLocationProviderDisabled() -> c
    void onLocationProviderStatusChanged(org.andengine.input.sensor.location.LocationProviderStatus,android.os.Bundle) -> a
org.andengine.input.sensor.location.LocationProviderStatus -> org.andengine.input.sensor.location.b:
    org.andengine.input.sensor.location.LocationProviderStatus AVAILABLE -> a
    org.andengine.input.sensor.location.LocationProviderStatus OUT_OF_SERVICE -> b
    org.andengine.input.sensor.location.LocationProviderStatus TEMPORARILY_UNAVAILABLE -> c
    org.andengine.input.sensor.location.LocationProviderStatus[] ENUM$VALUES -> d
    org.andengine.input.sensor.location.LocationProviderStatus[] values() -> values
    org.andengine.input.sensor.location.LocationProviderStatus valueOf(java.lang.String) -> valueOf
org.andengine.input.sensor.location.LocationSensorOptions -> org.andengine.input.sensor.location.LocationSensorOptions:
    boolean mEnabledOnly -> a
    long mMinimumTriggerTime -> b
    long mMinimumTriggerDistance -> c
org.andengine.input.sensor.orientation.IOrientationListener -> org.andengine.input.sensor.b.a:
    void onOrientationAccuracyChanged(org.andengine.input.sensor.orientation.OrientationData) -> a
    void onOrientationChanged(org.andengine.input.sensor.orientation.OrientationData) -> b
org.andengine.input.sensor.orientation.OrientationData -> org.andengine.input.sensor.b.b:
    float[] mAccelerationValues -> d
    float[] mMagneticFieldValues -> e
    float[] mRotationMatrix -> f
    int mMagneticFieldAccuracy -> g
    void setValues(float[]) -> a
    void setAccuracy(int) -> a
    void setAccelerationValues(float[]) -> b
    void setMagneticFieldValues(float[]) -> c
    void updateOrientation() -> a
    void setAccelerationAccuracy(int) -> c
    void setMagneticFieldAccuracy(int) -> d
    java.lang.String toString() -> toString
org.andengine.input.touch.TouchEvent -> org.andengine.input.a.a:
    org.andengine.input.touch.TouchEvent$TouchEventPool TOUCHEVENT_POOL -> f
    int mPointerID -> a
    float mX -> b
    float mY -> c
    int mAction -> d
    android.view.MotionEvent mMotionEvent -> e
    org.andengine.input.touch.TouchEvent obtain(float,float,int,int,android.view.MotionEvent) -> a
    void set(float,float,int,int,android.view.MotionEvent) -> b
    void recycle() -> a
    float getX() -> b
    float getY() -> c
    void set(float,float) -> a
    void offset(float,float) -> b
    int getPointerID() -> d
    int getAction() -> e
    boolean isActionDown() -> f
    boolean isActionMove() -> g
    android.view.MotionEvent getMotionEvent() -> h
org.andengine.input.touch.TouchEvent$TouchEventPool -> org.andengine.input.a.b:
    org.andengine.input.touch.TouchEvent onAllocatePoolItem() -> a
    java.lang.Object onAllocatePoolItem() -> b
org.andengine.input.touch.controller.BaseTouchController -> org.andengine.input.a.a.a:
    org.andengine.input.touch.controller.ITouchEventCallback mTouchEventCallback -> a
    org.andengine.util.adt.pool.RunnablePoolUpdateHandler mTouchEventRunnablePoolUpdateHandler -> b
    void setTouchEventCallback(org.andengine.input.touch.controller.ITouchEventCallback) -> a
    void reset() -> l
    void onUpdate(float) -> a
    void fireTouchEvent(float,float,int,int,android.view.MotionEvent) -> a
    org.andengine.input.touch.controller.ITouchEventCallback access$0(org.andengine.input.touch.controller.BaseTouchController) -> a
org.andengine.input.touch.controller.BaseTouchController$1 -> org.andengine.input.a.a.b:
    org.andengine.input.touch.controller.BaseTouchController this$0 -> a
    org.andengine.input.touch.controller.BaseTouchController$TouchEventRunnablePoolItem onAllocatePoolItem() -> a
    org.andengine.util.adt.pool.RunnablePoolItem onAllocatePoolItem() -> b
org.andengine.input.touch.controller.BaseTouchController$TouchEventRunnablePoolItem -> org.andengine.input.a.a.c:
    org.andengine.input.touch.TouchEvent mTouchEvent -> d
    org.andengine.input.touch.controller.BaseTouchController this$0 -> a
    void set(org.andengine.input.touch.TouchEvent) -> a
    void run() -> run
    void onRecycle() -> a
org.andengine.input.touch.controller.ITouchController -> org.andengine.input.a.a.d:
    void setTouchEventCallback(org.andengine.input.touch.controller.ITouchEventCallback) -> a
    void onHandleMotionEvent(android.view.MotionEvent) -> a
org.andengine.input.touch.controller.ITouchEventCallback -> org.andengine.input.a.a.e:
    boolean onTouchEvent(org.andengine.input.touch.TouchEvent) -> a
org.andengine.input.touch.controller.MultiTouchController -> org.andengine.input.a.a.f:
    void onHandleMotionEvent(android.view.MotionEvent) -> a
    void onHandleTouchMove(android.view.MotionEvent) -> b
    void onHandleTouchAction(int,android.view.MotionEvent) -> a
    int getPointerIndex(android.view.MotionEvent) -> c
org.andengine.input.touch.controller.SingleTouchController -> org.andengine.input.a.a.g:
    void onHandleMotionEvent(android.view.MotionEvent) -> a
org.andengine.opengl.GLES20Fix -> org.andengine.opengl.GLES20Fix:
    boolean NATIVE_LIB_LOADED -> a
    boolean WORKAROUND_MISSING_GLES20_METHODS -> b
    void glVertexAttribPointer(int,int,int,boolean,int,int) -> glVertexAttribPointer
org.andengine.opengl.font.Font -> org.andengine.opengl.a.a:
    org.andengine.opengl.texture.ITexture mTexture -> c
    android.util.SparseArray mManagedCharacterToLetterMap -> d
    java.util.ArrayList mLettersPendingToBeDrawnToTexture -> e
    android.graphics.Paint mPaint -> a
    android.graphics.Paint mBackgroundPaint -> f
    android.graphics.Canvas mCanvas -> b
    void invalidateLetters() -> a
    android.graphics.Bitmap getLetterBitmap(org.andengine.opengl.font.Letter) -> a
    void drawLetter(java.lang.String,float,float) -> a
    void update(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.font.FontFactory -> org.andengine.opengl.a.b:
    int COLOR_DEFAULT -> a
    java.lang.String sAssetBasePath -> b
    void setAssetBasePath(java.lang.String) -> a
    void onCreate() -> a
org.andengine.opengl.font.FontManager -> org.andengine.opengl.a.c:
    java.util.ArrayList mFontsManaged -> a
    java.util.ArrayList mBitmapFontsManaged -> b
    java.util.HashMap mFontsMapped -> c
    void onCreate() -> a
    void onDestroy() -> b
    void updateFonts(org.andengine.opengl.util.GLState) -> a
    void onReload() -> c
org.andengine.opengl.font.Letter -> org.andengine.opengl.a.d:
    char mCharacter -> a
    boolean mWhitespace -> m
    int mTextureX -> b
    int mTextureY -> c
    int mWidth -> d
    int mHeight -> e
    float mOffsetX -> f
    float mOffsetY -> g
    float mAdvance -> h
    float mU -> i
    float mV -> j
    float mU2 -> k
    float mV2 -> l
    android.util.SparseIntArray mKernings -> n
    boolean isWhitespace() -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
org.andengine.opengl.font.exception.FontException -> org.andengine.opengl.a.a.a:
org.andengine.opengl.shader.PositionColorShaderProgram -> org.andengine.opengl.b.a:
    org.andengine.opengl.shader.PositionColorShaderProgram INSTANCE -> b
    int sUniformModelViewPositionMatrixLocation -> a
    org.andengine.opengl.shader.PositionColorShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram -> org.andengine.opengl.b.b:
    org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram INSTANCE -> c
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    org.andengine.opengl.shader.PositionColorTextureCoordinatesShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram -> org.andengine.opengl.b.c:
    org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram INSTANCE -> l
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    int sUniformTexture1Location -> c
    int sUniformTextureSelectTexture0Location -> d
    int sUniformPositionInterpolationMix0Location -> e
    org.andengine.opengl.shader.PositionTextureCoordinatesPositionInterpolationTextureSelectShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram -> org.andengine.opengl.b.d:
    org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram INSTANCE -> c
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    org.andengine.opengl.shader.PositionTextureCoordinatesShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram -> org.andengine.opengl.b.e:
    org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram INSTANCE -> e
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    int sUniformTexture1Location -> c
    int sUniformTextureSelectTexture0Location -> d
    org.andengine.opengl.shader.PositionTextureCoordinatesTextureSelectShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram -> org.andengine.opengl.b.f:
    org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram INSTANCE -> d
    int sUniformModelViewPositionMatrixLocation -> a
    int sUniformTexture0Location -> b
    int sUniformColorLocation -> c
    org.andengine.opengl.shader.PositionTextureCoordinatesUniformColorShaderProgram getInstance() -> a
    void link(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
org.andengine.opengl.shader.ShaderProgram -> org.andengine.opengl.b.g:
    int[] HARDWAREID_CONTAINER -> a
    int[] PARAMETERS_CONTAINER -> b
    int[] LENGTH_CONTAINER -> c
    int[] SIZE_CONTAINER -> d
    int[] TYPE_CONTAINER -> e
    byte[] NAME_CONTAINER -> l
    org.andengine.opengl.shader.source.IShaderSource mVertexShaderSource -> f
    org.andengine.opengl.shader.source.IShaderSource mFragmentShaderSource -> g
    int mProgramID -> h
    boolean mCompiled -> i
    java.util.HashMap mUniformLocations -> j
    java.util.HashMap mAttributeLocations -> k
    boolean isCompiled() -> b
    void setCompiled(boolean) -> a
    int getUniformLocation(java.lang.String) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes) -> a
    void unbind(org.andengine.opengl.util.GLState) -> b
    void compile(org.andengine.opengl.util.GLState) -> c
    void link(org.andengine.opengl.util.GLState) -> a
    int compileShader(java.lang.String,int) -> a
    void initUniformLocations() -> a
    void initAttributeLocations() -> c
org.andengine.opengl.shader.ShaderProgramManager -> org.andengine.opengl.b.h:
    java.util.ArrayList mShaderProgramsManaged -> a
    void onCreate() -> a
    void onDestroy() -> b
    void loadShaderProgram(org.andengine.opengl.shader.ShaderProgram) -> a
    void onReload() -> c
org.andengine.opengl.shader.exception.ShaderProgramCompileException -> org.andengine.opengl.b.a.a:
org.andengine.opengl.shader.exception.ShaderProgramException -> org.andengine.opengl.b.a.b:
org.andengine.opengl.shader.exception.ShaderProgramLinkException -> org.andengine.opengl.b.a.c:
org.andengine.opengl.shader.source.IShaderSource -> org.andengine.opengl.b.b.a:
    java.lang.String getShaderSource(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.shader.source.StringShaderSource -> org.andengine.opengl.b.b.b:
    java.lang.String mShaderSource -> a
    java.lang.String getShaderSource(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.texture.ITexture -> org.andengine.opengl.c.a:
    int getWidth() -> a
    int getHeight() -> b
    boolean isLoadedToHardware() -> c
    void setNotLoadedToHardware() -> d
    boolean isUpdateOnHardwareNeeded() -> e
    void loadToHardware(org.andengine.opengl.util.GLState) -> a
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> b
    void reloadToHardware(org.andengine.opengl.util.GLState) -> c
    void bind(org.andengine.opengl.util.GLState) -> d
    org.andengine.opengl.texture.PixelFormat getPixelFormat() -> f
    org.andengine.opengl.texture.TextureOptions getTextureOptions() -> g
org.andengine.opengl.texture.ITextureStateListener -> org.andengine.opengl.c.b:
    void onLoadedToHardware(org.andengine.opengl.texture.ITexture) -> a
    void onUnloadedFromHardware(org.andengine.opengl.texture.ITexture) -> b
org.andengine.opengl.texture.PixelFormat -> org.andengine.opengl.c.c:
    org.andengine.opengl.texture.PixelFormat UNDEFINED -> a
    org.andengine.opengl.texture.PixelFormat RGBA_4444 -> b
    org.andengine.opengl.texture.PixelFormat RGBA_5551 -> c
    org.andengine.opengl.texture.PixelFormat RGBA_8888 -> d
    org.andengine.opengl.texture.PixelFormat RGB_565 -> e
    org.andengine.opengl.texture.PixelFormat A_8 -> f
    org.andengine.opengl.texture.PixelFormat I_8 -> g
    org.andengine.opengl.texture.PixelFormat AI_88 -> h
    int mGLInternalFormat -> i
    int mGLFormat -> j
    int mGLType -> k
    int mBitsPerPixel -> l
    org.andengine.opengl.texture.PixelFormat[] ENUM$VALUES -> m
    int getGLInternalFormat() -> a
    int getGLFormat() -> b
    int getGLType() -> c
    org.andengine.opengl.texture.PixelFormat[] values() -> values
    org.andengine.opengl.texture.PixelFormat valueOf(java.lang.String) -> valueOf
org.andengine.opengl.texture.Texture -> org.andengine.opengl.c.d:
    org.andengine.opengl.texture.TextureManager mTextureManager -> a
    org.andengine.opengl.texture.PixelFormat mPixelFormat -> b
    org.andengine.opengl.texture.TextureOptions mTextureOptions -> c
    int mHardwareTextureID -> d
    boolean mUpdateOnHardwareNeeded -> e
    org.andengine.opengl.texture.ITextureStateListener mTextureStateListener -> f
    boolean isLoadedToHardware() -> c
    void setNotLoadedToHardware() -> d
    boolean isUpdateOnHardwareNeeded() -> e
    org.andengine.opengl.texture.PixelFormat getPixelFormat() -> f
    org.andengine.opengl.texture.TextureOptions getTextureOptions() -> g
    org.andengine.opengl.texture.ITextureStateListener getTextureStateListener() -> h
    void writeTextureToHardware(org.andengine.opengl.util.GLState) -> e
    void loadToHardware(org.andengine.opengl.util.GLState) -> a
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> b
    void reloadToHardware(org.andengine.opengl.util.GLState) -> c
    void bind(org.andengine.opengl.util.GLState) -> d
org.andengine.opengl.texture.TextureManager -> org.andengine.opengl.c.e:
    java.util.HashSet mTexturesManaged -> a
    java.util.HashMap mTexturesMapped -> b
    java.util.ArrayList mTexturesLoaded -> c
    java.util.ArrayList mTexturesToBeLoaded -> d
    java.util.ArrayList mTexturesToBeUnloaded -> e
    org.andengine.opengl.texture.TextureWarmUpVertexBufferObject mTextureWarmUpVertexBufferObject -> f
    void onCreate() -> a
    void onReload() -> b
    void onDestroy() -> c
    boolean loadTexture(org.andengine.opengl.texture.ITexture) -> a
    void updateTextures(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.texture.TextureOptions -> org.andengine.opengl.c.f:
    org.andengine.opengl.texture.TextureOptions NEAREST -> a
    org.andengine.opengl.texture.TextureOptions BILINEAR -> b
    org.andengine.opengl.texture.TextureOptions REPEATING_NEAREST -> c
    org.andengine.opengl.texture.TextureOptions REPEATING_BILINEAR -> d
    org.andengine.opengl.texture.TextureOptions NEAREST_PREMULTIPLYALPHA -> e
    org.andengine.opengl.texture.TextureOptions BILINEAR_PREMULTIPLYALPHA -> f
    org.andengine.opengl.texture.TextureOptions REPEATING_NEAREST_PREMULTIPLYALPHA -> g
    org.andengine.opengl.texture.TextureOptions REPEATING_BILINEAR_PREMULTIPLYALPHA -> h
    org.andengine.opengl.texture.TextureOptions DEFAULT -> i
    int mMagFilter -> j
    int mMinFilter -> k
    float mWrapT -> l
    float mWrapS -> m
    boolean mPreMultiplyAlpha -> n
    void apply() -> a
org.andengine.opengl.texture.TextureWarmUpVertexBufferObject -> org.andengine.opengl.c.g:
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes VERTEXBUFFEROBJECTATTRIBUTES_DEFAULT -> a
    java.nio.FloatBuffer mFloatBuffer -> b
    void onBufferData() -> a
    void warmup(org.andengine.opengl.util.GLState,org.andengine.opengl.texture.ITexture) -> a
org.andengine.opengl.texture.atlas.ITextureAtlas -> org.andengine.opengl.c.a.a:
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> a
org.andengine.opengl.texture.atlas.ITextureAtlas$ITextureAtlasStateListener -> org.andengine.opengl.c.a.b:
    void onTextureAtlasSourceLoaded(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource) -> a
    void onTextureAtlasSourceLoadExeption(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,java.lang.Throwable) -> a
org.andengine.opengl.texture.atlas.TextureAtlas -> org.andengine.opengl.c.a.c:
    int mWidth -> g
    int mHeight -> h
    java.util.ArrayList mTextureAtlasSources -> i
    int getWidth() -> a
    int getHeight() -> b
    org.andengine.opengl.texture.atlas.ITextureAtlas$ITextureAtlasStateListener getTextureStateListener() -> i
    org.andengine.opengl.texture.atlas.ITextureAtlas$ITextureAtlasStateListener getTextureAtlasStateListener() -> j
    void addTextureAtlasSource(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> a
    void checkTextureAtlasSourcePosition(org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> b
    org.andengine.opengl.texture.ITextureStateListener getTextureStateListener() -> h
org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas -> org.andengine.opengl.c.a.a.a:
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat mBitmapTextureFormat -> j
    void writeTextureToHardware(org.andengine.opengl.util.GLState) -> e
org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlasTextureRegionFactory -> org.andengine.opengl.c.a.a.b:
    java.lang.String sAssetBasePath -> a
    void setAssetBasePath(java.lang.String) -> a
    void reset() -> a
    org.andengine.opengl.texture.region.TextureRegion createFromAsset(org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas,android.content.Context,java.lang.String,int,int) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromAsset(org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas,android.content.res.AssetManager,java.lang.String,int,int) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.bitmap.BitmapTextureAtlas,org.andengine.opengl.texture.atlas.bitmap.source.IBitmapTextureAtlasSource,int,int) -> a
org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource -> org.andengine.opengl.c.a.a.a.a:
    android.content.res.AssetManager mAssetManager -> e
    java.lang.String mAssetPath -> f
    org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource create(android.content.res.AssetManager,java.lang.String) -> a
    org.andengine.opengl.texture.atlas.bitmap.source.AssetBitmapTextureAtlasSource create(android.content.res.AssetManager,java.lang.String,int,int) -> a
    android.graphics.Bitmap onLoadBitmap(android.graphics.Bitmap$Config) -> a
    java.lang.String toString() -> toString
org.andengine.opengl.texture.atlas.bitmap.source.IBitmapTextureAtlasSource -> org.andengine.opengl.c.a.a.a.b:
    android.graphics.Bitmap onLoadBitmap(android.graphics.Bitmap$Config) -> a
org.andengine.opengl.texture.atlas.source.BaseTextureAtlasSource -> org.andengine.opengl.c.a.b.a:
    int mTextureX -> a
    int mTextureY -> b
    int mTextureWidth -> c
    int mTextureHeight -> d
    int getTextureX() -> a
    int getTextureY() -> b
    void setTextureX(int) -> a
    void setTextureY(int) -> b
    int getTextureWidth() -> c
    int getTextureHeight() -> d
    java.lang.String toString() -> toString
org.andengine.opengl.texture.atlas.source.ITextureAtlasSource -> org.andengine.opengl.c.a.b.b:
    int getTextureX() -> a
    int getTextureY() -> b
    void setTextureX(int) -> a
    void setTextureY(int) -> b
    int getTextureWidth() -> c
    int getTextureHeight() -> d
org.andengine.opengl.texture.bitmap.BitmapTextureFormat -> org.andengine.opengl.c.b.a:
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat RGBA_8888 -> a
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat RGB_565 -> b
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat RGBA_4444 -> c
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat A_8 -> d
    android.graphics.Bitmap$Config mBitmapConfig -> e
    org.andengine.opengl.texture.PixelFormat mPixelFormat -> f
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat[] ENUM$VALUES -> g
    android.graphics.Bitmap$Config getBitmapConfig() -> a
    org.andengine.opengl.texture.PixelFormat getPixelFormat() -> b
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat[] values() -> values
    org.andengine.opengl.texture.bitmap.BitmapTextureFormat valueOf(java.lang.String) -> valueOf
org.andengine.opengl.texture.region.BaseTextureRegion -> org.andengine.opengl.c.c.a:
    org.andengine.opengl.texture.ITexture mTexture -> a
    org.andengine.opengl.texture.ITexture getTexture() -> a
org.andengine.opengl.texture.region.ITextureRegion -> org.andengine.opengl.c.c.b:
    float getWidth() -> b
    float getHeight() -> c
    float getU() -> d
    float getU2() -> e
    float getV() -> f
    float getV2() -> g
    boolean isRotated() -> h
    org.andengine.opengl.texture.ITexture getTexture() -> a
org.andengine.opengl.texture.region.TextureRegion -> org.andengine.opengl.c.c.c:
    float mTextureX -> b
    float mTextureY -> c
    float mTextureWidth -> d
    float mTextureHeight -> e
    float mU -> f
    float mU2 -> g
    float mV -> h
    float mV2 -> i
    float mScale -> j
    boolean mRotated -> k
    float getTextureX() -> i
    float getTextureY() -> j
    float getWidth() -> b
    float getHeight() -> c
    float getU() -> d
    float getU2() -> e
    float getV() -> f
    float getV2() -> g
    boolean isRotated() -> h
    void updateUV() -> k
org.andengine.opengl.texture.region.TextureRegionFactory -> org.andengine.opengl.c.c.d:
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int) -> a
    org.andengine.opengl.texture.region.TextureRegion createFromSource(org.andengine.opengl.texture.atlas.ITextureAtlas,org.andengine.opengl.texture.atlas.source.ITextureAtlasSource,int,int,boolean) -> a
org.andengine.opengl.util.BufferUtils -> org.andengine.opengl.util.BufferUtils:
    boolean NATIVE_LIB_LOADED -> a
    boolean WORKAROUND_BYTEBUFFER_PUT_FLOATARRAY -> b
    boolean WORKAROUND_BYTEBUFFER_ALLOCATE_DIRECT -> c
    java.nio.ByteBuffer allocateDirectByteBuffer(int) -> a
    void freeDirectByteBuffer(java.nio.ByteBuffer) -> a
    java.nio.ByteBuffer jniAllocateDirect(int) -> jniAllocateDirect
    void jniFreeDirect(java.nio.ByteBuffer) -> jniFreeDirect
    void put(java.nio.ByteBuffer,float[],int,int) -> a
    void jniPut(java.nio.ByteBuffer,float[],int,int) -> jniPut
org.andengine.opengl.util.GLHelper -> org.andengine.opengl.util.a:
    int[] $SWITCH_TABLE$org$andengine$opengl$texture$PixelFormat -> a
    java.nio.Buffer getPixels(android.graphics.Bitmap,org.andengine.opengl.texture.PixelFormat,java.nio.ByteOrder) -> a
    int[] convertARGB_8888toRGBA_8888(int[],java.nio.ByteOrder) -> a
    short[] convertARGB_8888toRGB_565(int[],java.nio.ByteOrder) -> b
    short[] convertARGB_8888toRGBA_4444(int[],java.nio.ByteOrder) -> c
    byte[] convertARGB_8888toA_8(int[]) -> a
    int[] getPixelsARGB_8888(android.graphics.Bitmap) -> a
    int[] $SWITCH_TABLE$org$andengine$opengl$texture$PixelFormat() -> a
org.andengine.opengl.util.GLMatrixStack -> org.andengine.opengl.util.b:
    float[] mMatrixStack -> a
    int mMatrixStackOffset -> b
    float[] mTemp -> c
    void glLoadIdentity() -> a
    void glTranslatef(float,float,float) -> a
    void glRotatef(float,float,float,float) -> a
    void glScalef(float,float,float) -> b
    void glSkewf(float,float) -> a
    void glOrthof(float,float,float,float,float,float) -> a
    void glPushMatrix() -> b
    void glPopMatrix() -> c
    void reset() -> d
    void setSkewM(float[],int,float,float) -> a
org.andengine.opengl.util.GLMatrixStack$GLMatrixStackOverflowException -> org.andengine.opengl.util.c:
org.andengine.opengl.util.GLMatrixStack$GLMatrixStackUnderflowException -> org.andengine.opengl.util.d:
org.andengine.opengl.util.GLState -> org.andengine.opengl.util.e:
    int[] mHardwareIDContainer -> a
    java.lang.String mVersion -> b
    java.lang.String mRenderer -> c
    java.lang.String mExtensions -> d
    int mMaximumVertexAttributeCount -> e
    int mMaximumVertexShaderUniformVectorCount -> f
    int mMaximumFragmentShaderUniformVectorCount -> g
    int mMaximumTextureSize -> h
    int mMaximumTextureUnits -> i
    int mCurrentArrayBufferID -> j
    int mCurrentIndexBufferID -> k
    int mCurrentShaderProgramID -> l
    int[] mCurrentBoundTextureIDs -> m
    int mCurrentFramebufferID -> n
    int mCurrentActiveTextureIndex -> o
    int mCurrentSourceBlendMode -> p
    int mCurrentDestinationBlendMode -> q
    boolean mDitherEnabled -> r
    boolean mDepthTestEnabled -> s
    boolean mScissorTestEnabled -> t
    boolean mBlendEnabled -> u
    boolean mCullingEnabled -> v
    float mLineWidth -> w
    org.andengine.opengl.util.GLMatrixStack mModelViewGLMatrixStack -> x
    org.andengine.opengl.util.GLMatrixStack mProjectionGLMatrixStack -> y
    float[] mModelViewGLMatrix -> z
    float[] mProjectionGLMatrix -> A
    float[] mModelViewProjectionGLMatrix -> B
    void reset(org.andengine.engine.options.RenderOptions,org.andengine.opengl.view.ConfigChooser,javax.microedition.khronos.egl.EGLConfig) -> a
    boolean enableBlend() -> a
    boolean disableBlend() -> b
    boolean disableCulling() -> c
    boolean enableDither() -> d
    boolean disableDither() -> e
    boolean setDitherEnabled(boolean) -> a
    boolean enableDepthTest() -> f
    boolean disableDepthTest() -> g
    int generateBuffer() -> h
    void bindArrayBuffer(int) -> a
    void deleteArrayBuffer(int) -> b
    void useProgram(int) -> c
    int generateTexture() -> i
    void bindTexture(int) -> d
    void deleteTexture(int) -> e
    void blendFunction(int,int) -> a
    void lineWidth(float) -> a
    void pushModelViewGLMatrix() -> j
    void popModelViewGLMatrix() -> k
    void loadModelViewGLMatrixIdentity() -> l
    void translateModelViewGLMatrixf(float,float,float) -> a
    void rotateModelViewGLMatrixf(float,float,float,float) -> a
    void scaleModelViewGLMatrixf(float,float,int) -> a
    void skewModelViewGLMatrixf(float,float) -> a
    void pushProjectionGLMatrix() -> m
    void popProjectionGLMatrix() -> n
    void loadProjectionGLMatrixIdentity() -> o
    void translateProjectionGLMatrixf(float,float,float) -> b
    void rotateProjectionGLMatrixf(float,float,float,float) -> b
    void orthoProjectionGLMatrixf(float,float,float,float,float,float) -> a
    float[] getModelViewProjectionGLMatrix() -> p
    void glTexSubImage2D(int,int,int,int,android.graphics.Bitmap,org.andengine.opengl.texture.PixelFormat) -> a
    int getInteger(int) -> f
org.andengine.opengl.util.VertexUtils -> org.andengine.opengl.util.f:
    float getVertex(float[],int,int,int) -> a
org.andengine.opengl.vbo.DrawType -> org.andengine.opengl.d.a:
    org.andengine.opengl.vbo.DrawType STATIC -> a
    org.andengine.opengl.vbo.DrawType DYNAMIC -> b
    org.andengine.opengl.vbo.DrawType STREAM -> c
    int mUsage -> d
    org.andengine.opengl.vbo.DrawType[] ENUM$VALUES -> e
    int getUsage() -> a
    org.andengine.opengl.vbo.DrawType[] values() -> values
    org.andengine.opengl.vbo.DrawType valueOf(java.lang.String) -> valueOf
org.andengine.opengl.vbo.HighPerformanceVertexBufferObject -> org.andengine.opengl.d.b:
    float[] mBufferData -> a
    java.nio.FloatBuffer mFloatBuffer -> b
    void onBufferData() -> a
org.andengine.opengl.vbo.IVertexBufferObject -> org.andengine.opengl.d.c:
    boolean isAutoDispose() -> c
    boolean isLoadedToHardware() -> d
    void setNotLoadedToHardware() -> e
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> a
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> a
    void unbind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> b
    void draw(int,int) -> a
org.andengine.opengl.vbo.VertexBufferObject -> org.andengine.opengl.d.d:
    int mCapacity -> c
    boolean mAutoDispose -> d
    int mUsage -> e
    java.nio.ByteBuffer mByteBuffer -> f
    int mHardwareBufferID -> g
    boolean mDirtyOnHardware -> h
    boolean mDisposed -> i
    org.andengine.opengl.vbo.VertexBufferObjectManager mVertexBufferObjectManager -> j
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes mVertexBufferObjectAttributes -> k
    boolean isDisposed() -> b
    boolean isAutoDispose() -> c
    boolean isLoadedToHardware() -> d
    void setNotLoadedToHardware() -> e
    void setDirtyOnHardware() -> f
    void onBufferData() -> a
    void bind(org.andengine.opengl.util.GLState) -> b
    void bind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> a
    void unbind(org.andengine.opengl.util.GLState,org.andengine.opengl.shader.ShaderProgram) -> b
    void unloadFromHardware(org.andengine.opengl.util.GLState) -> a
    void draw(int,int) -> a
    void dispose() -> v
    void finalize() -> finalize
    void loadToHardware(org.andengine.opengl.util.GLState) -> c
org.andengine.opengl.vbo.VertexBufferObjectManager -> org.andengine.opengl.d.e:
    java.util.ArrayList mVertexBufferObjectsLoaded -> a
    java.util.ArrayList mVertexBufferObjectsToBeUnloaded -> b
    void onCreate() -> a
    void onDestroy() -> b
    void onVertexBufferObjectLoaded(org.andengine.opengl.vbo.IVertexBufferObject) -> a
    void onUnloadVertexBufferObject(org.andengine.opengl.vbo.IVertexBufferObject) -> b
    void onReload() -> c
    void updateVertexBufferObjects(org.andengine.opengl.util.GLState) -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute -> org.andengine.opengl.d.a.a:
    int mLocation -> a
    java.lang.String mName -> b
    int mSize -> c
    int mType -> d
    boolean mNormalized -> e
    int mOffset -> f
    void glVertexAttribPointer(int) -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributeFix -> org.andengine.opengl.d.a.b:
    void glVertexAttribPointer(int) -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes -> org.andengine.opengl.d.a.c:
    int mStride -> a
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute[] mVertexBufferObjectAttributes -> b
    void glVertexAttribPointers() -> a
org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributesBuilder -> org.andengine.opengl.d.a.d:
    boolean WORAROUND_GLES2_GLVERTEXATTRIBPOINTER_MISSING -> a
    int mIndex -> b
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttribute[] mVertexBufferObjectAttributes -> c
    int mOffset -> d
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributesBuilder add(int,java.lang.String,int,int,boolean) -> a
    org.andengine.opengl.vbo.attribute.VertexBufferObjectAttributes build() -> a
org.andengine.opengl.view.ConfigChooser -> org.andengine.opengl.e.a:
    int[] BUFFER -> a
    int[] mMultiSampleEGLConfig -> b
    int[] mNvidiaCoverageMultiSampleEGLConfig -> c
    int[] mDefaultEGLConfig -> d
    boolean mRequestedMultiSampling -> e
    boolean mActualMultiSampling -> f
    boolean mActualCoverageMultiSampling -> g
    int mRequestedRedSize -> h
    int mRequestedGreenSize -> i
    int mRequestedBlueSize -> j
    int mRequestedAlphaSize -> k
    int mRequestedDepthSize -> l
    int mRequestedStencilSize -> m
    int mActualRedSize -> n
    int mActualGreenSize -> o
    int mActualBlueSize -> p
    int mActualAlphaSize -> q
    int mActualDepthSize -> r
    int mActualStencilSize -> s
    boolean isActualCoverageMultiSampling() -> a
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay) -> chooseConfig
    javax.microedition.khronos.egl.EGLConfig chooseConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,org.andengine.opengl.view.ConfigChooserMatcher) -> a
    int getEGLConfigCount(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,int[]) -> a
    javax.microedition.khronos.egl.EGLConfig findEGLConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,int[],int,org.andengine.opengl.view.ConfigChooserMatcher) -> a
    javax.microedition.khronos.egl.EGLConfig findEGLConfig(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig[],org.andengine.opengl.view.ConfigChooserMatcher) -> a
    int getConfigAttrib(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher -> org.andengine.opengl.e.b:
    org.andengine.opengl.view.ConfigChooserMatcher STRICT -> a
    org.andengine.opengl.view.ConfigChooserMatcher LOOSE_STENCIL -> b
    org.andengine.opengl.view.ConfigChooserMatcher LOOSE_DEPTH_AND_STENCIL -> c
    org.andengine.opengl.view.ConfigChooserMatcher ANY -> d
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$1 -> org.andengine.opengl.e.c:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$2 -> org.andengine.opengl.e.d:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$3 -> org.andengine.opengl.e.e:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.ConfigChooserMatcher$4 -> org.andengine.opengl.e.f:
    boolean matches(int,int,int,int,int,int,int,int,int,int,int,int) -> a
org.andengine.opengl.view.EngineRenderer -> org.andengine.opengl.e.g:
    org.andengine.engine.Engine mEngine -> a
    org.andengine.opengl.view.ConfigChooser mConfigChooser -> b
    boolean mMultiSampling -> c
    org.andengine.opengl.view.IRendererListener mRendererListener -> d
    org.andengine.opengl.util.GLState mGLState -> e
    void onSurfaceCreated(javax.microedition.khronos.opengles.GL10,javax.microedition.khronos.egl.EGLConfig) -> onSurfaceCreated
    void onSurfaceChanged(javax.microedition.khronos.opengles.GL10,int,int) -> onSurfaceChanged
    void onDrawFrame(javax.microedition.khronos.opengles.GL10) -> onDrawFrame
org.andengine.opengl.view.IRendererListener -> org.andengine.opengl.e.h:
    void onSurfaceCreated(org.andengine.opengl.util.GLState) -> a
    void onSurfaceChanged(org.andengine.opengl.util.GLState,int,int) -> a
org.andengine.ui.IGameInterface -> org.andengine.e.a:
    org.andengine.engine.options.EngineOptions onCreateEngineOptions() -> a
    void onCreateResources(org.andengine.ui.IGameInterface$OnCreateResourcesCallback) -> a
    void onCreateScene(org.andengine.ui.IGameInterface$OnCreateSceneCallback) -> a
    void onPopulateScene(org.andengine.entity.scene.Scene,org.andengine.ui.IGameInterface$OnPopulateSceneCallback) -> a
org.andengine.ui.IGameInterface$OnCreateResourcesCallback -> org.andengine.e.b:
    void onCreateResourcesFinished() -> a
org.andengine.ui.IGameInterface$OnCreateSceneCallback -> org.andengine.e.c:
    void onCreateSceneFinished(org.andengine.entity.scene.Scene) -> a
org.andengine.ui.IGameInterface$OnPopulateSceneCallback -> org.andengine.e.d:
    void onPopulateSceneFinished() -> a
org.andengine.util.IDisposable -> org.andengine.f.a:
    boolean isDisposed() -> b
    void dispose() -> v
org.andengine.util.IDisposable$AlreadyDisposedException -> org.andengine.f.b:
org.andengine.util.StreamUtils -> org.andengine.f.c:
    void close(java.io.Closeable) -> a
org.andengine.util.adt.color.Color -> org.andengine.f.a.a.a:
    org.andengine.util.adt.color.Color WHITE -> a
    org.andengine.util.adt.color.Color BLACK -> b
    org.andengine.util.adt.color.Color RED -> c
    org.andengine.util.adt.color.Color YELLOW -> d
    org.andengine.util.adt.color.Color GREEN -> e
    org.andengine.util.adt.color.Color CYAN -> f
    org.andengine.util.adt.color.Color BLUE -> g
    org.andengine.util.adt.color.Color PINK -> h
    org.andengine.util.adt.color.Color TRANSPARENT -> i
    int WHITE_ABGR_PACKED_INT -> j
    int BLACK_ABGR_PACKED_INT -> k
    int RED_ABGR_PACKED_INT -> l
    int YELLOW_ABGR_PACKED_INT -> m
    int GREEN_ABGR_PACKED_INT -> n
    int CYAN_ABGR_PACKED_INT -> o
    int BLUE_ABGR_PACKED_INT -> p
    int PINK_ABGR_PACKED_INT -> q
    int TRANSPARENT_ABGR_PACKED_INT -> r
    float WHITE_ABGR_PACKED_FLOAT -> s
    float BLACK_ABGR_PACKED_FLOAT -> t
    float RED_ABGR_PACKED_FLOAT -> u
    float YELLOW_ABGR_PACKED_FLOAT -> v
    float GREEN_ABGR_PACKED_FLOAT -> w
    float CYAN_ABGR_PACKED_FLOAT -> x
    float BLUE_ABGR_PACKED_FLOAT -> y
    float PINK_ABGR_PACKED_FLOAT -> z
    float TRANSPARENT_ABGR_PACKED_FLOAT -> A
    int WHITE_ARGB_PACKED_INT -> B
    int BLACK_ARGB_PACKED_INT -> C
    int RED_ARGB_PACKED_INT -> D
    int YELLOW_ARGB_PACKED_INT -> E
    int GREEN_ARGB_PACKED_INT -> F
    int CYAN_ARGB_PACKED_INT -> G
    int BLUE_ARGB_PACKED_INT -> H
    int PINK_ARGB_PACKED_INT -> I
    int TRANSPARENT_ARGB_PACKED_INT -> J
    float mRed -> K
    float mGreen -> L
    float mBlue -> M
    float mAlpha -> N
    int mABGRPackedInt -> O
    float mABGRPackedFloat -> P
    float getRed() -> a
    float getGreen() -> b
    float getBlue() -> c
    float getAlpha() -> d
    boolean setAlphaChecking(float) -> a
    void set(float,float,float) -> a
    void set(float,float,float,float) -> a
    void set(org.andengine.util.adt.color.Color) -> a
    int getABGRPackedInt() -> e
    float getABGRPackedFloat() -> f
    int getARGBPackedInt() -> g
    void reset() -> h
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    boolean equals(org.andengine.util.adt.color.Color) -> b
    void packABGRAlpha() -> i
    void packABGR() -> j
org.andengine.util.adt.color.ColorUtils -> org.andengine.f.a.a.b:
    float[] HSV_TO_COLOR -> a
    int convertRGBAToARGBPackedInt(float,float,float,float) -> a
    int convertRGBAToABGRPackedInt(float,float,float,float) -> b
    float convertPackedIntToPackedFloat(int) -> a
org.andengine.util.adt.list.ShiftList -> org.andengine.f.a.b.a:
    java.lang.Object[] mItems -> a
    int mHead -> b
    int mTail -> c
    java.lang.Object poll() -> a
    void enter(java.lang.Object) -> a
    void shift() -> b
    void ensureShiftableRight() -> c
org.andengine.util.adt.list.SmartList -> org.andengine.f.a.b.b:
    void clear(org.andengine.util.call.ParameterCallable) -> a
org.andengine.util.adt.pool.GenericPool -> org.andengine.f.a.c.a:
    java.util.ArrayList mAvailableItems -> a
    int mGrowth -> b
    int mAvailableItemCountMaximum -> c
    int mUnrecycledItemCount -> d
    java.lang.Object onAllocatePoolItem() -> b
    void onHandleRecycleItem(java.lang.Object) -> a
    java.lang.Object onHandleAllocatePoolItem() -> c
    void onHandleObtainItem(java.lang.Object) -> b
    void batchAllocatePoolItems(int) -> a
    java.lang.Object obtainPoolItem() -> d
    void recyclePoolItem(java.lang.Object) -> c
org.andengine.util.adt.pool.Pool -> org.andengine.f.a.c.b:
    org.andengine.util.adt.pool.PoolItem onHandleAllocatePoolItem() -> a
    void onHandleObtainItem(org.andengine.util.adt.pool.PoolItem) -> a
    void onHandleRecycleItem(org.andengine.util.adt.pool.PoolItem) -> b
    void recyclePoolItem(org.andengine.util.adt.pool.PoolItem) -> c
    boolean ownsPoolItem(org.andengine.util.adt.pool.PoolItem) -> d
    java.lang.Object onHandleAllocatePoolItem() -> c
    void onHandleRecycleItem(java.lang.Object) -> a
    void onHandleObtainItem(java.lang.Object) -> b
    void recyclePoolItem(java.lang.Object) -> c
org.andengine.util.adt.pool.PoolItem -> org.andengine.f.a.c.c:
    org.andengine.util.adt.pool.Pool mParent -> b
    boolean mRecycled -> c
    boolean isRecycled() -> b
    boolean isFromPool(org.andengine.util.adt.pool.Pool) -> a
    void onRecycle() -> a
    void onObtain() -> c
org.andengine.util.adt.pool.PoolUpdateHandler -> org.andengine.f.a.c.d:
    org.andengine.util.adt.pool.Pool mPool -> a
    org.andengine.util.adt.queue.IQueue mScheduledPoolItemQueue -> b
    org.andengine.util.adt.pool.PoolItem onAllocatePoolItem() -> c
    void onHandlePoolItem(org.andengine.util.adt.pool.PoolItem) -> a
    void onUpdate(float) -> a
    void reset() -> l
    org.andengine.util.adt.pool.PoolItem obtainPoolItem() -> d
    void postPoolItem(org.andengine.util.adt.pool.PoolItem) -> b
org.andengine.util.adt.pool.PoolUpdateHandler$1 -> org.andengine.f.a.c.e:
    org.andengine.util.adt.pool.PoolUpdateHandler this$0 -> a
    org.andengine.util.adt.pool.PoolItem onAllocatePoolItem() -> e
    java.lang.Object onAllocatePoolItem() -> b
org.andengine.util.adt.pool.RunnablePoolItem -> org.andengine.f.a.c.f:
org.andengine.util.adt.pool.RunnablePoolUpdateHandler -> org.andengine.f.a.c.g:
    org.andengine.util.adt.pool.RunnablePoolItem onAllocatePoolItem() -> b
    void onHandlePoolItem(org.andengine.util.adt.pool.RunnablePoolItem) -> a
    void onHandlePoolItem(org.andengine.util.adt.pool.PoolItem) -> a
    org.andengine.util.adt.pool.PoolItem onAllocatePoolItem() -> c
org.andengine.util.adt.queue.IQueue -> org.andengine.f.a.d.a:
    java.lang.Object poll() -> a
    void enter(java.lang.Object) -> a
org.andengine.util.adt.queue.concurrent.SynchronizedQueue -> org.andengine.f.a.d.a.a:
    org.andengine.util.adt.queue.IQueue mQueue -> a
    java.lang.Object poll() -> a
    void enter(java.lang.Object) -> a
org.andengine.util.adt.transformation.Transformation -> org.andengine.f.a.e.a:
    float a -> a
    float b -> b
    float c -> c
    float d -> d
    float tx -> e
    float ty -> f
    java.lang.String toString() -> toString
    void setToIdentity() -> a
    void setTo(org.andengine.util.adt.transformation.Transformation) -> a
    void postTranslate(float,float) -> a
    void postRotate(float) -> a
    void postScale(float,float) -> b
    void postSkew(float,float) -> c
    void postConcat(org.andengine.util.adt.transformation.Transformation) -> b
    void postConcat(float,float,float,float,float,float) -> a
    void preConcat(org.andengine.util.adt.transformation.Transformation) -> c
    void preConcat(float,float,float,float,float,float) -> b
    void transform(float[]) -> a
org.andengine.util.algorithm.collision.BaseCollisionChecker -> org.andengine.f.b.a.a:
    int relativeCCW(float,float,float,float,float,float) -> a
    boolean checkCollision(float[],int,float[],int) -> a
    boolean checkCollision(float[],int,int,int,int,float[],int,int,int,int) -> a
    boolean checkCollisionSub(float[],int,int,int,int,int,float[],int,int,int,int) -> a
    boolean checkContains(float[],int,float,float) -> a
    boolean checkContains(float[],int,int,int,int,float,float) -> a
org.andengine.util.algorithm.collision.EntityCollisionChecker -> org.andengine.f.b.a.b:
    float[] VERTICES_CONTAINS_TMP -> a
    float[] VERTICES_COLLISION_TMP_A -> b
    float[] VERTICES_COLLISION_TMP_B -> c
    boolean checkContains(org.andengine.entity.IEntity,float,float) -> a
    boolean isVisible(org.andengine.engine.camera.Camera,org.andengine.entity.IEntity) -> a
    void fillVertices(org.andengine.entity.IEntity,float[]) -> a
    void fillVertices(float,float,float,float,org.andengine.util.adt.transformation.Transformation,float[]) -> a
    void fillVertices(org.andengine.engine.camera.Camera,float[]) -> a
org.andengine.util.algorithm.collision.LineCollisionChecker -> org.andengine.f.b.a.c:
    boolean checkLineCollision(float,float,float,float,float,float,float,float) -> a
org.andengine.util.algorithm.sort.InsertionSorter -> org.andengine.f.b.b.a:
    void sort(java.util.List,int,int,java.util.Comparator) -> a
org.andengine.util.algorithm.sort.Sorter -> org.andengine.f.b.b.b:
    void sort(java.util.List,int,int,java.util.Comparator) -> a
    void sort(java.util.List,java.util.Comparator) -> a
org.andengine.util.call.ParameterCallable -> org.andengine.f.c.a:
    void call(java.lang.Object) -> a
org.andengine.util.debug.Debug -> org.andengine.f.d.a:
    java.lang.String sTag -> a
    java.lang.String sDebugUser -> b
    org.andengine.util.debug.Debug$DebugLevel sDebugLevel -> c
    void d(java.lang.String) -> a
    void d(java.lang.String,java.lang.String,java.lang.Throwable) -> a
    void w(java.lang.String) -> b
    void w(java.lang.String,java.lang.String,java.lang.Throwable) -> b
    void e(java.lang.String) -> c
    void e(java.lang.Throwable) -> a
    void e(java.lang.String,java.lang.Throwable) -> a
    void e(java.lang.String,java.lang.String,java.lang.Throwable) -> c
org.andengine.util.debug.Debug$DebugLevel -> org.andengine.f.d.b:
    org.andengine.util.debug.Debug$DebugLevel NONE -> a
    org.andengine.util.debug.Debug$DebugLevel ERROR -> b
    org.andengine.util.debug.Debug$DebugLevel WARNING -> c
    org.andengine.util.debug.Debug$DebugLevel INFO -> d
    org.andengine.util.debug.Debug$DebugLevel DEBUG -> e
    org.andengine.util.debug.Debug$DebugLevel VERBOSE -> f
    org.andengine.util.debug.Debug$DebugLevel ALL -> g
    org.andengine.util.debug.Debug$DebugLevel[] ENUM$VALUES -> h
    boolean isSameOrLessThan(org.andengine.util.debug.Debug$DebugLevel) -> a
    org.andengine.util.debug.Debug$DebugLevel[] values() -> values
    org.andengine.util.debug.Debug$DebugLevel valueOf(java.lang.String) -> valueOf
org.andengine.util.exception.AndEngineRuntimeException -> org.andengine.f.e.a:
org.andengine.util.exception.MethodNotSupportedException -> org.andengine.f.e.b:
org.andengine.util.exception.NullBitmapException -> org.andengine.f.e.c:
org.andengine.util.math.MathUtils -> org.andengine.f.f.a:
    java.util.Random RANDOM -> a
    float degToRad(float) -> a
    float random(float,float) -> a
    boolean isPowerOfTwo(int) -> a
    float[] rotateAroundCenter(float[],float,float,float) -> a
    float[] revertRotateAroundCenter(float[],float,float,float) -> b
org.andengine.util.modifier.BaseDurationModifier -> org.andengine.f.g.a:
    float mSecondsElapsed -> c
    float mDuration -> a
    float getSecondsElapsed() -> a
    float getDuration() -> b
    void onManagedUpdate(float,java.lang.Object) -> a
    void onManagedInitialize(java.lang.Object) -> a
    float onUpdate(float,java.lang.Object) -> b
    void reset() -> c
org.andengine.util.modifier.BaseModifier -> org.andengine.f.g.b:
    boolean mFinished -> b
    boolean mAutoUnregisterWhenFinished -> a
    org.andengine.util.adt.list.SmartList mModifierListeners -> c
    boolean isFinished() -> d
    boolean isAutoUnregisterWhenFinished() -> e
    void addModifierListener(org.andengine.util.modifier.IModifier$IModifierListener) -> a
    void onModifierStarted(java.lang.Object) -> b
    void onModifierFinished(java.lang.Object) -> c
org.andengine.util.modifier.BaseSingleValueSpanModifier -> org.andengine.f.g.c:
    float mFromValue -> e
    float mValueSpan -> f
    org.andengine.util.modifier.ease.IEaseFunction mEaseFunction -> c
    void onSetInitialValue(java.lang.Object,float) -> a
    void onSetValue(java.lang.Object,float,float) -> a
    void onManagedInitialize(java.lang.Object) -> a
    void onManagedUpdate(float,java.lang.Object) -> a
org.andengine.util.modifier.IModifier -> org.andengine.f.g.d:
    java.util.Comparator MODIFIER_COMPARATOR_DURATION_DESCENDING -> d
    void reset() -> c
    boolean isFinished() -> d
    boolean isAutoUnregisterWhenFinished() -> e
    float getDuration() -> b
    float onUpdate(float,java.lang.Object) -> b
org.andengine.util.modifier.IModifier$1 -> org.andengine.f.g.e:
    int compare(org.andengine.util.modifier.IModifier,org.andengine.util.modifier.IModifier) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
org.andengine.util.modifier.IModifier$IModifierListener -> org.andengine.f.g.f:
    void onModifierStarted(org.andengine.util.modifier.IModifier,java.lang.Object) -> a
    void onModifierFinished(org.andengine.util.modifier.IModifier,java.lang.Object) -> b
org.andengine.util.modifier.ModifierList -> org.andengine.f.g.g:
    java.lang.Object mTarget -> a
    boolean add(org.andengine.util.modifier.IModifier) -> a
    void onUpdate(float) -> a
    void reset() -> l
    boolean add(java.lang.Object) -> add
org.andengine.util.modifier.ease.EaseLinear -> org.andengine.f.g.a.a:
    org.andengine.util.modifier.ease.EaseLinear INSTANCE -> a
    org.andengine.util.modifier.ease.EaseLinear getInstance() -> a
    float getPercentage(float,float) -> a
org.andengine.util.modifier.ease.IEaseFunction -> org.andengine.f.g.a.b:
    float getPercentage(float,float) -> a
org.andengine.util.system.SystemUtils -> org.andengine.f.h.a:
    boolean SDK_VERSION_ECLAIR_OR_LATER -> a
    boolean SDK_VERSION_FROYO_OR_LATER -> b
    boolean SDK_VERSION_GINGERBREAD_OR_LATER -> c
    boolean SDK_VERSION_HONEYCOMB_OR_LATER -> d
    boolean SDK_VERSION_ICE_CREAM_SANDWICH_OR_LATER -> e
    boolean isAndroidVersionOrLower(int) -> a
    boolean isAndroidVersion(int,int) -> a
